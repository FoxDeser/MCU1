
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000358c  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08003738  08003738  00013738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d8  080039d8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  080039d8  080039d8  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d8  080039d8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080039e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  200001f4  08003bd4  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08003bd4  00020244  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e4f  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000058e  00000000  00000000  0002206d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d8  00000000  00000000  00022600  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a0  00000000  00000000  000227d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002808  00000000  00000000  00022978  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001638  00000000  00000000  00025180  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ad88  00000000  00000000  000267b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00031540  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001444  00000000  00000000  000315bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	200001f4 	.word	0x200001f4
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800371c 	.word	0x0800371c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	200001f8 	.word	0x200001f8
 80001e4:	0800371c 	.word	0x0800371c

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_drsub>:
 80001f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001fc:	e002      	b.n	8000204 <__adddf3>
 80001fe:	bf00      	nop

08000200 <__aeabi_dsub>:
 8000200:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000204 <__adddf3>:
 8000204:	b530      	push	{r4, r5, lr}
 8000206:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800020e:	ea94 0f05 	teq	r4, r5
 8000212:	bf08      	it	eq
 8000214:	ea90 0f02 	teqeq	r0, r2
 8000218:	bf1f      	itttt	ne
 800021a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800021e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000222:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000226:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022a:	f000 80e2 	beq.w	80003f2 <__adddf3+0x1ee>
 800022e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000232:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000236:	bfb8      	it	lt
 8000238:	426d      	neglt	r5, r5
 800023a:	dd0c      	ble.n	8000256 <__adddf3+0x52>
 800023c:	442c      	add	r4, r5
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	ea82 0000 	eor.w	r0, r2, r0
 800024a:	ea83 0101 	eor.w	r1, r3, r1
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	2d36      	cmp	r5, #54	; 0x36
 8000258:	bf88      	it	hi
 800025a:	bd30      	pophi	{r4, r5, pc}
 800025c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000260:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000264:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000268:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x70>
 800026e:	4240      	negs	r0, r0
 8000270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000274:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000278:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800027c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000280:	d002      	beq.n	8000288 <__adddf3+0x84>
 8000282:	4252      	negs	r2, r2
 8000284:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000288:	ea94 0f05 	teq	r4, r5
 800028c:	f000 80a7 	beq.w	80003de <__adddf3+0x1da>
 8000290:	f1a4 0401 	sub.w	r4, r4, #1
 8000294:	f1d5 0e20 	rsbs	lr, r5, #32
 8000298:	db0d      	blt.n	80002b6 <__adddf3+0xb2>
 800029a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800029e:	fa22 f205 	lsr.w	r2, r2, r5
 80002a2:	1880      	adds	r0, r0, r2
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ac:	1880      	adds	r0, r0, r2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	4159      	adcs	r1, r3
 80002b4:	e00e      	b.n	80002d4 <__adddf3+0xd0>
 80002b6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ba:	f10e 0e20 	add.w	lr, lr, #32
 80002be:	2a01      	cmp	r2, #1
 80002c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c4:	bf28      	it	cs
 80002c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ca:	fa43 f305 	asr.w	r3, r3, r5
 80002ce:	18c0      	adds	r0, r0, r3
 80002d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d8:	d507      	bpl.n	80002ea <__adddf3+0xe6>
 80002da:	f04f 0e00 	mov.w	lr, #0
 80002de:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ee:	d31b      	bcc.n	8000328 <__adddf3+0x124>
 80002f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f4:	d30c      	bcc.n	8000310 <__adddf3+0x10c>
 80002f6:	0849      	lsrs	r1, r1, #1
 80002f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000300:	f104 0401 	add.w	r4, r4, #1
 8000304:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000308:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800030c:	f080 809a 	bcs.w	8000444 <__adddf3+0x240>
 8000310:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	ea41 0105 	orr.w	r1, r1, r5
 8000326:	bd30      	pop	{r4, r5, pc}
 8000328:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800032c:	4140      	adcs	r0, r0
 800032e:	eb41 0101 	adc.w	r1, r1, r1
 8000332:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000336:	f1a4 0401 	sub.w	r4, r4, #1
 800033a:	d1e9      	bne.n	8000310 <__adddf3+0x10c>
 800033c:	f091 0f00 	teq	r1, #0
 8000340:	bf04      	itt	eq
 8000342:	4601      	moveq	r1, r0
 8000344:	2000      	moveq	r0, #0
 8000346:	fab1 f381 	clz	r3, r1
 800034a:	bf08      	it	eq
 800034c:	3320      	addeq	r3, #32
 800034e:	f1a3 030b 	sub.w	r3, r3, #11
 8000352:	f1b3 0220 	subs.w	r2, r3, #32
 8000356:	da0c      	bge.n	8000372 <__adddf3+0x16e>
 8000358:	320c      	adds	r2, #12
 800035a:	dd08      	ble.n	800036e <__adddf3+0x16a>
 800035c:	f102 0c14 	add.w	ip, r2, #20
 8000360:	f1c2 020c 	rsb	r2, r2, #12
 8000364:	fa01 f00c 	lsl.w	r0, r1, ip
 8000368:	fa21 f102 	lsr.w	r1, r1, r2
 800036c:	e00c      	b.n	8000388 <__adddf3+0x184>
 800036e:	f102 0214 	add.w	r2, r2, #20
 8000372:	bfd8      	it	le
 8000374:	f1c2 0c20 	rsble	ip, r2, #32
 8000378:	fa01 f102 	lsl.w	r1, r1, r2
 800037c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000380:	bfdc      	itt	le
 8000382:	ea41 010c 	orrle.w	r1, r1, ip
 8000386:	4090      	lslle	r0, r2
 8000388:	1ae4      	subs	r4, r4, r3
 800038a:	bfa2      	ittt	ge
 800038c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000390:	4329      	orrge	r1, r5
 8000392:	bd30      	popge	{r4, r5, pc}
 8000394:	ea6f 0404 	mvn.w	r4, r4
 8000398:	3c1f      	subs	r4, #31
 800039a:	da1c      	bge.n	80003d6 <__adddf3+0x1d2>
 800039c:	340c      	adds	r4, #12
 800039e:	dc0e      	bgt.n	80003be <__adddf3+0x1ba>
 80003a0:	f104 0414 	add.w	r4, r4, #20
 80003a4:	f1c4 0220 	rsb	r2, r4, #32
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f302 	lsl.w	r3, r1, r2
 80003b0:	ea40 0003 	orr.w	r0, r0, r3
 80003b4:	fa21 f304 	lsr.w	r3, r1, r4
 80003b8:	ea45 0103 	orr.w	r1, r5, r3
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f1c4 040c 	rsb	r4, r4, #12
 80003c2:	f1c4 0220 	rsb	r2, r4, #32
 80003c6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ca:	fa01 f304 	lsl.w	r3, r1, r4
 80003ce:	ea40 0003 	orr.w	r0, r0, r3
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	fa21 f004 	lsr.w	r0, r1, r4
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f094 0f00 	teq	r4, #0
 80003e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003e6:	bf06      	itte	eq
 80003e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003ec:	3401      	addeq	r4, #1
 80003ee:	3d01      	subne	r5, #1
 80003f0:	e74e      	b.n	8000290 <__adddf3+0x8c>
 80003f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f6:	bf18      	it	ne
 80003f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003fc:	d029      	beq.n	8000452 <__adddf3+0x24e>
 80003fe:	ea94 0f05 	teq	r4, r5
 8000402:	bf08      	it	eq
 8000404:	ea90 0f02 	teqeq	r0, r2
 8000408:	d005      	beq.n	8000416 <__adddf3+0x212>
 800040a:	ea54 0c00 	orrs.w	ip, r4, r0
 800040e:	bf04      	itt	eq
 8000410:	4619      	moveq	r1, r3
 8000412:	4610      	moveq	r0, r2
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	ea91 0f03 	teq	r1, r3
 800041a:	bf1e      	ittt	ne
 800041c:	2100      	movne	r1, #0
 800041e:	2000      	movne	r0, #0
 8000420:	bd30      	popne	{r4, r5, pc}
 8000422:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000426:	d105      	bne.n	8000434 <__adddf3+0x230>
 8000428:	0040      	lsls	r0, r0, #1
 800042a:	4149      	adcs	r1, r1
 800042c:	bf28      	it	cs
 800042e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000432:	bd30      	pop	{r4, r5, pc}
 8000434:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000438:	bf3c      	itt	cc
 800043a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800043e:	bd30      	popcc	{r4, r5, pc}
 8000440:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000444:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000456:	bf1a      	itte	ne
 8000458:	4619      	movne	r1, r3
 800045a:	4610      	movne	r0, r2
 800045c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000460:	bf1c      	itt	ne
 8000462:	460b      	movne	r3, r1
 8000464:	4602      	movne	r2, r0
 8000466:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046a:	bf06      	itte	eq
 800046c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000470:	ea91 0f03 	teqeq	r1, r3
 8000474:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	bf00      	nop

0800047c <__aeabi_ui2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f04f 0500 	mov.w	r5, #0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e750      	b.n	800033c <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_i2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b4:	bf48      	it	mi
 80004b6:	4240      	negmi	r0, r0
 80004b8:	f04f 0100 	mov.w	r1, #0
 80004bc:	e73e      	b.n	800033c <__adddf3+0x138>
 80004be:	bf00      	nop

080004c0 <__aeabi_f2d>:
 80004c0:	0042      	lsls	r2, r0, #1
 80004c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ce:	bf1f      	itttt	ne
 80004d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004dc:	4770      	bxne	lr
 80004de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e2:	bf08      	it	eq
 80004e4:	4770      	bxeq	lr
 80004e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ea:	bf04      	itt	eq
 80004ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000500:	e71c      	b.n	800033c <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_ul2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	e00a      	b.n	800052a <__aeabi_l2d+0x16>

08000514 <__aeabi_l2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000522:	d502      	bpl.n	800052a <__aeabi_l2d+0x16>
 8000524:	4240      	negs	r0, r0
 8000526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000536:	f43f aed8 	beq.w	80002ea <__adddf3+0xe6>
 800053a:	f04f 0203 	mov.w	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	fa00 fc03 	lsl.w	ip, r0, r3
 800055a:	fa20 f002 	lsr.w	r0, r0, r2
 800055e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000562:	ea40 000e 	orr.w	r0, r0, lr
 8000566:	fa21 f102 	lsr.w	r1, r1, r2
 800056a:	4414      	add	r4, r2
 800056c:	e6bd      	b.n	80002ea <__adddf3+0xe6>
 800056e:	bf00      	nop

08000570 <__aeabi_dmul>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057e:	bf1d      	ittte	ne
 8000580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000584:	ea94 0f0c 	teqne	r4, ip
 8000588:	ea95 0f0c 	teqne	r5, ip
 800058c:	f000 f8de 	bleq	800074c <__aeabi_dmul+0x1dc>
 8000590:	442c      	add	r4, r5
 8000592:	ea81 0603 	eor.w	r6, r1, r3
 8000596:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a2:	bf18      	it	ne
 80005a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b0:	d038      	beq.n	8000624 <__aeabi_dmul+0xb4>
 80005b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c6:	f04f 0600 	mov.w	r6, #0
 80005ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ce:	f09c 0f00 	teq	ip, #0
 80005d2:	bf18      	it	ne
 80005d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e4:	d204      	bcs.n	80005f0 <__aeabi_dmul+0x80>
 80005e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ea:	416d      	adcs	r5, r5
 80005ec:	eb46 0606 	adc.w	r6, r6, r6
 80005f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000600:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000604:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000608:	bf88      	it	hi
 800060a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060e:	d81e      	bhi.n	800064e <__aeabi_dmul+0xde>
 8000610:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000614:	bf08      	it	eq
 8000616:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061a:	f150 0000 	adcs.w	r0, r0, #0
 800061e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000628:	ea46 0101 	orr.w	r1, r6, r1
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	ea81 0103 	eor.w	r1, r1, r3
 8000634:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000638:	bfc2      	ittt	gt
 800063a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000642:	bd70      	popgt	{r4, r5, r6, pc}
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f04f 0e00 	mov.w	lr, #0
 800064c:	3c01      	subs	r4, #1
 800064e:	f300 80ab 	bgt.w	80007a8 <__aeabi_dmul+0x238>
 8000652:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000656:	bfde      	ittt	le
 8000658:	2000      	movle	r0, #0
 800065a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd70      	pople	{r4, r5, r6, pc}
 8000660:	f1c4 0400 	rsb	r4, r4, #0
 8000664:	3c20      	subs	r4, #32
 8000666:	da35      	bge.n	80006d4 <__aeabi_dmul+0x164>
 8000668:	340c      	adds	r4, #12
 800066a:	dc1b      	bgt.n	80006a4 <__aeabi_dmul+0x134>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f305 	lsl.w	r3, r0, r5
 8000678:	fa20 f004 	lsr.w	r0, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800068c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000690:	fa21 f604 	lsr.w	r6, r1, r4
 8000694:	eb42 0106 	adc.w	r1, r2, r6
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 040c 	rsb	r4, r4, #12
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f304 	lsl.w	r3, r0, r4
 80006b0:	fa20 f005 	lsr.w	r0, r0, r5
 80006b4:	fa01 f204 	lsl.w	r2, r1, r4
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c4:	f141 0100 	adc.w	r1, r1, #0
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f205 	lsl.w	r2, r0, r5
 80006dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e0:	fa20 f304 	lsr.w	r3, r0, r4
 80006e4:	fa01 f205 	lsl.w	r2, r1, r5
 80006e8:	ea43 0302 	orr.w	r3, r3, r2
 80006ec:	fa21 f004 	lsr.w	r0, r1, r4
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	fa21 f204 	lsr.w	r2, r1, r4
 80006f8:	ea20 0002 	bic.w	r0, r0, r2
 80006fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f094 0f00 	teq	r4, #0
 8000710:	d10f      	bne.n	8000732 <__aeabi_dmul+0x1c2>
 8000712:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000716:	0040      	lsls	r0, r0, #1
 8000718:	eb41 0101 	adc.w	r1, r1, r1
 800071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3c01      	subeq	r4, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1a6>
 8000726:	ea41 0106 	orr.w	r1, r1, r6
 800072a:	f095 0f00 	teq	r5, #0
 800072e:	bf18      	it	ne
 8000730:	4770      	bxne	lr
 8000732:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	eb43 0303 	adc.w	r3, r3, r3
 800073c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3d01      	subeq	r5, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1c6>
 8000746:	ea43 0306 	orr.w	r3, r3, r6
 800074a:	4770      	bx	lr
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000754:	bf18      	it	ne
 8000756:	ea95 0f0c 	teqne	r5, ip
 800075a:	d00c      	beq.n	8000776 <__aeabi_dmul+0x206>
 800075c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000760:	bf18      	it	ne
 8000762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000766:	d1d1      	bne.n	800070c <__aeabi_dmul+0x19c>
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd70      	pop	{r4, r5, r6, pc}
 8000776:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077a:	bf06      	itte	eq
 800077c:	4610      	moveq	r0, r2
 800077e:	4619      	moveq	r1, r3
 8000780:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000784:	d019      	beq.n	80007ba <__aeabi_dmul+0x24a>
 8000786:	ea94 0f0c 	teq	r4, ip
 800078a:	d102      	bne.n	8000792 <__aeabi_dmul+0x222>
 800078c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000790:	d113      	bne.n	80007ba <__aeabi_dmul+0x24a>
 8000792:	ea95 0f0c 	teq	r5, ip
 8000796:	d105      	bne.n	80007a4 <__aeabi_dmul+0x234>
 8000798:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800079c:	bf1c      	itt	ne
 800079e:	4610      	movne	r0, r2
 80007a0:	4619      	movne	r1, r3
 80007a2:	d10a      	bne.n	80007ba <__aeabi_dmul+0x24a>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c2:	bd70      	pop	{r4, r5, r6, pc}

080007c4 <__aeabi_ddiv>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d2:	bf1d      	ittte	ne
 80007d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d8:	ea94 0f0c 	teqne	r4, ip
 80007dc:	ea95 0f0c 	teqne	r5, ip
 80007e0:	f000 f8a7 	bleq	8000932 <__aeabi_ddiv+0x16e>
 80007e4:	eba4 0405 	sub.w	r4, r4, r5
 80007e8:	ea81 0e03 	eor.w	lr, r1, r3
 80007ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f4:	f000 8088 	beq.w	8000908 <__aeabi_ddiv+0x144>
 80007f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000800:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000804:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000808:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800080c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000810:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000814:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000818:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800081c:	429d      	cmp	r5, r3
 800081e:	bf08      	it	eq
 8000820:	4296      	cmpeq	r6, r2
 8000822:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000826:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082a:	d202      	bcs.n	8000832 <__aeabi_ddiv+0x6e>
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	1ab6      	subs	r6, r6, r2
 8000834:	eb65 0503 	sbc.w	r5, r5, r3
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000842:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 000c 	orrcs.w	r0, r0, ip
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a4:	d018      	beq.n	80008d8 <__aeabi_ddiv+0x114>
 80008a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c2:	d1c0      	bne.n	8000846 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	d10b      	bne.n	80008e2 <__aeabi_ddiv+0x11e>
 80008ca:	ea41 0100 	orr.w	r1, r1, r0
 80008ce:	f04f 0000 	mov.w	r0, #0
 80008d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d6:	e7b6      	b.n	8000846 <__aeabi_ddiv+0x82>
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf04      	itt	eq
 80008de:	4301      	orreq	r1, r0
 80008e0:	2000      	moveq	r0, #0
 80008e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e6:	bf88      	it	hi
 80008e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008ec:	f63f aeaf 	bhi.w	800064e <__aeabi_dmul+0xde>
 80008f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f4:	bf04      	itt	eq
 80008f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fe:	f150 0000 	adcs.w	r0, r0, #0
 8000902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800090c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000910:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000914:	bfc2      	ittt	gt
 8000916:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091e:	bd70      	popgt	{r4, r5, r6, pc}
 8000920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000924:	f04f 0e00 	mov.w	lr, #0
 8000928:	3c01      	subs	r4, #1
 800092a:	e690      	b.n	800064e <__aeabi_dmul+0xde>
 800092c:	ea45 0e06 	orr.w	lr, r5, r6
 8000930:	e68d      	b.n	800064e <__aeabi_dmul+0xde>
 8000932:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000936:	ea94 0f0c 	teq	r4, ip
 800093a:	bf08      	it	eq
 800093c:	ea95 0f0c 	teqeq	r5, ip
 8000940:	f43f af3b 	beq.w	80007ba <__aeabi_dmul+0x24a>
 8000944:	ea94 0f0c 	teq	r4, ip
 8000948:	d10a      	bne.n	8000960 <__aeabi_ddiv+0x19c>
 800094a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094e:	f47f af34 	bne.w	80007ba <__aeabi_dmul+0x24a>
 8000952:	ea95 0f0c 	teq	r5, ip
 8000956:	f47f af25 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e72c      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000960:	ea95 0f0c 	teq	r5, ip
 8000964:	d106      	bne.n	8000974 <__aeabi_ddiv+0x1b0>
 8000966:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096a:	f43f aefd 	beq.w	8000768 <__aeabi_dmul+0x1f8>
 800096e:	4610      	mov	r0, r2
 8000970:	4619      	mov	r1, r3
 8000972:	e722      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000978:	bf18      	it	ne
 800097a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097e:	f47f aec5 	bne.w	800070c <__aeabi_dmul+0x19c>
 8000982:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000986:	f47f af0d 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800098a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098e:	f47f aeeb 	bne.w	8000768 <__aeabi_dmul+0x1f8>
 8000992:	e712      	b.n	80007ba <__aeabi_dmul+0x24a>

08000994 <__gedf2>:
 8000994:	f04f 3cff 	mov.w	ip, #4294967295
 8000998:	e006      	b.n	80009a8 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__ledf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	e002      	b.n	80009a8 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__cmpdf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009be:	d01b      	beq.n	80009f8 <__cmpdf2+0x54>
 80009c0:	b001      	add	sp, #4
 80009c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c6:	bf0c      	ite	eq
 80009c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009cc:	ea91 0f03 	teqne	r1, r3
 80009d0:	bf02      	ittt	eq
 80009d2:	ea90 0f02 	teqeq	r0, r2
 80009d6:	2000      	moveq	r0, #0
 80009d8:	4770      	bxeq	lr
 80009da:	f110 0f00 	cmn.w	r0, #0
 80009de:	ea91 0f03 	teq	r1, r3
 80009e2:	bf58      	it	pl
 80009e4:	4299      	cmppl	r1, r3
 80009e6:	bf08      	it	eq
 80009e8:	4290      	cmpeq	r0, r2
 80009ea:	bf2c      	ite	cs
 80009ec:	17d8      	asrcs	r0, r3, #31
 80009ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f2:	f040 0001 	orr.w	r0, r0, #1
 80009f6:	4770      	bx	lr
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__cmpdf2+0x64>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d107      	bne.n	8000a18 <__cmpdf2+0x74>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d1d6      	bne.n	80009c0 <__cmpdf2+0x1c>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d0d3      	beq.n	80009c0 <__cmpdf2+0x1c>
 8000a18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdrcmple>:
 8000a20:	4684      	mov	ip, r0
 8000a22:	4610      	mov	r0, r2
 8000a24:	4662      	mov	r2, ip
 8000a26:	468c      	mov	ip, r1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4663      	mov	r3, ip
 8000a2c:	e000      	b.n	8000a30 <__aeabi_cdcmpeq>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdcmpeq>:
 8000a30:	b501      	push	{r0, lr}
 8000a32:	f7ff ffb7 	bl	80009a4 <__cmpdf2>
 8000a36:	2800      	cmp	r0, #0
 8000a38:	bf48      	it	mi
 8000a3a:	f110 0f00 	cmnmi.w	r0, #0
 8000a3e:	bd01      	pop	{r0, pc}

08000a40 <__aeabi_dcmpeq>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff fff4 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a48:	bf0c      	ite	eq
 8000a4a:	2001      	moveq	r0, #1
 8000a4c:	2000      	movne	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmplt>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffea 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a5c:	bf34      	ite	cc
 8000a5e:	2001      	movcc	r0, #1
 8000a60:	2000      	movcs	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmple>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffe0 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpge>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffce 	bl	8000a20 <__aeabi_cdrcmple>
 8000a84:	bf94      	ite	ls
 8000a86:	2001      	movls	r0, #1
 8000a88:	2000      	movhi	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpgt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffc4 	bl	8000a20 <__aeabi_cdrcmple>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpun>:
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x10>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d10a      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x20>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d102      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	f04f 0001 	mov.w	r0, #1
 8000ace:	4770      	bx	lr

08000ad0 <__aeabi_d2iz>:
 8000ad0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad8:	d215      	bcs.n	8000b06 <__aeabi_d2iz+0x36>
 8000ada:	d511      	bpl.n	8000b00 <__aeabi_d2iz+0x30>
 8000adc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae4:	d912      	bls.n	8000b0c <__aeabi_d2iz+0x3c>
 8000ae6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	bf18      	it	ne
 8000afc:	4240      	negne	r0, r0
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0a:	d105      	bne.n	8000b18 <__aeabi_d2iz+0x48>
 8000b0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	bf08      	it	eq
 8000b12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <I2C1_GPIOInits>:
 * PB9 --> I2C1_SDA
 * ALT function mode : 4
 */

void I2C1_GPIOInits(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
	GPIO_Handler_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <I2C1_GPIOInits+0x40>)
 8000b28:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_Pinconfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_Pinconfig.GPIO_PinAltMode		= 4;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_Pinconfig.GPIO_PinOPType		= GPIO_OP_TYPE_OD;
 8000b32:	2301      	movs	r3, #1
 8000b34:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_Pinconfig.GPIO_PinPuPdControl	= GPIO_PIN_PU;
 8000b36:	2301      	movs	r3, #1
 8000b38:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_Pinconfig.GPIO_pinSpeed		= GPIO_SPEED_FAST;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	72bb      	strb	r3, [r7, #10]

	//SCL
	I2CPins.GPIO_Pinconfig.GPIO_PinNumber		= GPIO_PIN_NO_6;
 8000b3e:	2306      	movs	r3, #6
 8000b40:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f9bd 	bl	8000ec4 <GPIO_Init>

	//SDA
	I2CPins.GPIO_Pinconfig.GPIO_PinNumber		= GPIO_PIN_NO_9;
 8000b4a:	2309      	movs	r3, #9
 8000b4c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f9b7 	bl	8000ec4 <GPIO_Init>
}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40020400 	.word	0x40020400

08000b64 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	I2C1Handler.pI2Cx			 			= I2C1;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <I2C1_Inits+0x2c>)
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <I2C1_Inits+0x30>)
 8000b6c:	601a      	str	r2, [r3, #0]
	I2C1Handler.I2CConfig.I2C_ACKControl	= I2C_ACK_ENABLE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <I2C1_Inits+0x2c>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	725a      	strb	r2, [r3, #9]
	I2C1Handler.I2CConfig.I2C_DeviceAddress = MY_ADDR;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <I2C1_Inits+0x2c>)
 8000b76:	2268      	movs	r2, #104	; 0x68
 8000b78:	721a      	strb	r2, [r3, #8]
	I2C1Handler.I2CConfig.I2C_FMDutyCycle	= I2C_FM_DUTY_2;
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <I2C1_Inits+0x2c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	815a      	strh	r2, [r3, #10]
	I2C1Handler.I2CConfig.I2C_SCLSpeed		= I2C_SCL_SPEED_SM;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <I2C1_Inits+0x2c>)
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <I2C1_Inits+0x34>)
 8000b84:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handler);
 8000b86:	4802      	ldr	r0, [pc, #8]	; (8000b90 <I2C1_Inits+0x2c>)
 8000b88:	f000 fc2c 	bl	80013e4 <I2C_Init>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000220 	.word	0x20000220
 8000b94:	40005400 	.word	0x40005400
 8000b98:	000186a0 	.word	0x000186a0

08000b9c <main>:

int main (void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	//I2C Pin inits
	I2C1_GPIOInits();
 8000ba0:	f7ff ffbe 	bl	8000b20 <I2C1_GPIOInits>

	//I2C peripheral configuration
	I2C1_Inits();
 8000ba4:	f7ff ffde 	bl	8000b64 <I2C1_Inits>

	//I2C IRQ configuration
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV,ENABLE);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	201f      	movs	r0, #31
 8000bac:	f000 fdae 	bl	800170c <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER,ENABLE);
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	2020      	movs	r0, #32
 8000bb4:	f000 fdaa 	bl	800170c <I2C_IRQInterruptConfig>

	I2C_SlaveControlCallbackEvents(I2C1,ENABLE);
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <main+0x3c>)
 8000bbc:	f001 f80d 	bl	8001bda <I2C_SlaveControlCallbackEvents>

	//Enable the I2C peripheral
	I2C_PeripheralControl(I2C1Handler.pI2Cx, ENABLE);
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <main+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fcfa 	bl	80015c0 <I2C_PeripheralControl>

	//Enable ACK
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <main+0x3c>)
 8000bd0:	f000 fd3b 	bl	800164a <I2C_ManageAcking>

	while(1);
 8000bd4:	e7fe      	b.n	8000bd4 <main+0x38>
 8000bd6:	bf00      	nop
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	20000220 	.word	0x20000220

08000be0 <I2C1_EV_IRQHandler>:

	return 0;
}

void I2C1_EV_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handler);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <I2C1_EV_IRQHandler+0x10>)
 8000be6:	f000 fe15 	bl	8001814 <I2C_EV_IRQHandling>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000220 	.word	0x20000220

08000bf4 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handler);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <I2C1_ER_IRQHandler+0x10>)
 8000bfa:	f000 ff9e 	bl	8001b3a <I2C_ER_IRQHandling>
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000220 	.word	0x20000220

08000c08 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handler_t *pI2CHandler,uint8_t ApplicationEvent)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
	static uint8_t commandCode = 0;
	static uint8_t Cnt = 0 ;

	if (ApplicationEvent == I2C_EV_DATA_REQ)
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	2b08      	cmp	r3, #8
 8000c18:	d122      	bne.n	8000c60 <I2C_ApplicationEventCallback+0x58>
	{
		//Master wants some data, slave has to send it
		if(commandCode == 0x51)
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <I2C_ApplicationEventCallback+0x8c>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b51      	cmp	r3, #81	; 0x51
 8000c20:	d10b      	bne.n	8000c3a <I2C_ApplicationEventCallback+0x32>
		{
			//Send the length information to the master
			I2C_SlaveSendData(pI2CHandler->pI2Cx,strlen((char*)Tx_buf));
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681c      	ldr	r4, [r3, #0]
 8000c26:	481c      	ldr	r0, [pc, #112]	; (8000c98 <I2C_ApplicationEventCallback+0x90>)
 8000c28:	f7ff fade 	bl	80001e8 <strlen>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	4619      	mov	r1, r3
 8000c32:	4620      	mov	r0, r4
 8000c34:	f000 fcaa 	bl	800158c <I2C_SlaveSendData>
	{
		//This happens only during slave rxing
		//Master has ended the I2C communication with slave
	}

}
 8000c38:	e028      	b.n	8000c8c <I2C_ApplicationEventCallback+0x84>
		}else if (commandCode == 0x52)
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <I2C_ApplicationEventCallback+0x8c>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b52      	cmp	r3, #82	; 0x52
 8000c40:	d124      	bne.n	8000c8c <I2C_ApplicationEventCallback+0x84>
			I2C_SlaveSendData(pI2CHandler->pI2Cx,Tx_buf[Cnt++]);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6818      	ldr	r0, [r3, #0]
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <I2C_ApplicationEventCallback+0x94>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	b2d1      	uxtb	r1, r2
 8000c4e:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <I2C_ApplicationEventCallback+0x94>)
 8000c50:	7011      	strb	r1, [r2, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <I2C_ApplicationEventCallback+0x90>)
 8000c56:	5c9b      	ldrb	r3, [r3, r2]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f000 fc97 	bl	800158c <I2C_SlaveSendData>
}
 8000c5e:	e015      	b.n	8000c8c <I2C_ApplicationEventCallback+0x84>
	}else if (ApplicationEvent == I2C_EV_DATA_RCV)
 8000c60:	78fb      	ldrb	r3, [r7, #3]
 8000c62:	2b09      	cmp	r3, #9
 8000c64:	d109      	bne.n	8000c7a <I2C_ApplicationEventCallback+0x72>
		commandCode = I2C_SlaveReceiveData(pI2CHandler->pI2Cx);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fc9c 	bl	80015a8 <I2C_SlaveReceiveData>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <I2C_ApplicationEventCallback+0x8c>)
 8000c76:	701a      	strb	r2, [r3, #0]
}
 8000c78:	e008      	b.n	8000c8c <I2C_ApplicationEventCallback+0x84>
	}else if (ApplicationEvent == I2C_ERROR_AF)
 8000c7a:	78fb      	ldrb	r3, [r7, #3]
 8000c7c:	2b05      	cmp	r3, #5
 8000c7e:	d105      	bne.n	8000c8c <I2C_ApplicationEventCallback+0x84>
		commandCode = 0xff;
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <I2C_ApplicationEventCallback+0x8c>)
 8000c82:	22ff      	movs	r2, #255	; 0xff
 8000c84:	701a      	strb	r2, [r3, #0]
		Cnt = 0;
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <I2C_ApplicationEventCallback+0x94>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd90      	pop	{r4, r7, pc}
 8000c94:	20000210 	.word	0x20000210
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000211 	.word	0x20000211

08000ca0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca6:	490e      	ldr	r1, [pc, #56]	; (8000ce0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <LoopForever+0xe>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cbc:	4c0b      	ldr	r4, [pc, #44]	; (8000cec <LoopForever+0x16>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cca:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000cce:	f000 ffb7 	bl	8001c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cd2:	f7ff ff63 	bl	8000b9c <main>

08000cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cd6:	e7fe      	b.n	8000cd6 <LoopForever>
  ldr   r0, =_estack
 8000cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8000ce4:	080039e0 	.word	0x080039e0
  ldr r2, =_sbss
 8000ce8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8000cec:	20000244 	.word	0x20000244

08000cf0 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>
	...

08000cf4 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000d00:	78fb      	ldrb	r3, [r7, #3]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d162      	bne.n	8000dcc <GPIO_PeriClockControl+0xd8>
	{
		if (pGPIOx == GPIOA)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a64      	ldr	r2, [pc, #400]	; (8000e9c <GPIO_PeriClockControl+0x1a8>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d106      	bne.n	8000d1c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000d0e:	4b64      	ldr	r3, [pc, #400]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a63      	ldr	r2, [pc, #396]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000d1a:	e0b9      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a61      	ldr	r2, [pc, #388]	; (8000ea4 <GPIO_PeriClockControl+0x1b0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d106      	bne.n	8000d32 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000d24:	4b5e      	ldr	r3, [pc, #376]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a5d      	ldr	r2, [pc, #372]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d30:	e0ae      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a5c      	ldr	r2, [pc, #368]	; (8000ea8 <GPIO_PeriClockControl+0x1b4>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d106      	bne.n	8000d48 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000d3a:	4b59      	ldr	r3, [pc, #356]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a58      	ldr	r2, [pc, #352]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d46:	e0a3      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a58      	ldr	r2, [pc, #352]	; (8000eac <GPIO_PeriClockControl+0x1b8>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d106      	bne.n	8000d5e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000d50:	4b53      	ldr	r3, [pc, #332]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	4a52      	ldr	r2, [pc, #328]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000d56:	f043 0308 	orr.w	r3, r3, #8
 8000d5a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d5c:	e098      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a53      	ldr	r2, [pc, #332]	; (8000eb0 <GPIO_PeriClockControl+0x1bc>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d106      	bne.n	8000d74 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000d66:	4b4e      	ldr	r3, [pc, #312]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a4d      	ldr	r2, [pc, #308]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000d6c:	f043 0310 	orr.w	r3, r3, #16
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d72:	e08d      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a4f      	ldr	r2, [pc, #316]	; (8000eb4 <GPIO_PeriClockControl+0x1c0>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d106      	bne.n	8000d8a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000d7c:	4b48      	ldr	r3, [pc, #288]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a47      	ldr	r2, [pc, #284]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000d82:	f043 0320 	orr.w	r3, r3, #32
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d88:	e082      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4a      	ldr	r2, [pc, #296]	; (8000eb8 <GPIO_PeriClockControl+0x1c4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d106      	bne.n	8000da0 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_EN();
 8000d92:	4b43      	ldr	r3, [pc, #268]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a42      	ldr	r2, [pc, #264]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d9e:	e077      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a46      	ldr	r2, [pc, #280]	; (8000ebc <GPIO_PeriClockControl+0x1c8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d106      	bne.n	8000db6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000da8:	4b3d      	ldr	r3, [pc, #244]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a3c      	ldr	r2, [pc, #240]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000db4:	e06c      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a41      	ldr	r2, [pc, #260]	; (8000ec0 <GPIO_PeriClockControl+0x1cc>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d168      	bne.n	8000e90 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000dbe:	4b38      	ldr	r3, [pc, #224]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a37      	ldr	r2, [pc, #220]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000dca:	e061      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a33      	ldr	r2, [pc, #204]	; (8000e9c <GPIO_PeriClockControl+0x1a8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d106      	bne.n	8000de2 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000dd4:	4b32      	ldr	r3, [pc, #200]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a31      	ldr	r2, [pc, #196]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000dda:	f023 0301 	bic.w	r3, r3, #1
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000de0:	e056      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a2f      	ldr	r2, [pc, #188]	; (8000ea4 <GPIO_PeriClockControl+0x1b0>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d106      	bne.n	8000df8 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000dea:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a2c      	ldr	r2, [pc, #176]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000df0:	f023 0302 	bic.w	r3, r3, #2
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000df6:	e04b      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a2b      	ldr	r2, [pc, #172]	; (8000ea8 <GPIO_PeriClockControl+0x1b4>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d106      	bne.n	8000e0e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	4a26      	ldr	r2, [pc, #152]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000e06:	f023 0304 	bic.w	r3, r3, #4
 8000e0a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e0c:	e040      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a26      	ldr	r2, [pc, #152]	; (8000eac <GPIO_PeriClockControl+0x1b8>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d106      	bne.n	8000e24 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000e16:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a21      	ldr	r2, [pc, #132]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000e1c:	f023 0308 	bic.w	r3, r3, #8
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e22:	e035      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <GPIO_PeriClockControl+0x1bc>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d106      	bne.n	8000e3a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000e32:	f023 0310 	bic.w	r3, r3, #16
 8000e36:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e38:	e02a      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <GPIO_PeriClockControl+0x1c0>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d106      	bne.n	8000e50 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a16      	ldr	r2, [pc, #88]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000e48:	f023 0320 	bic.w	r3, r3, #32
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e4e:	e01f      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a19      	ldr	r2, [pc, #100]	; (8000eb8 <GPIO_PeriClockControl+0x1c4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d106      	bne.n	8000e66 <GPIO_PeriClockControl+0x172>
			GPIOA_PCLK_DI();
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000e5e:	f023 0301 	bic.w	r3, r3, #1
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e64:	e014      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <GPIO_PeriClockControl+0x1c8>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d106      	bne.n	8000e7c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e7a:	e009      	b.n	8000e90 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <GPIO_PeriClockControl+0x1cc>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d105      	bne.n	8000e90 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <GPIO_PeriClockControl+0x1ac>)
 8000e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020400 	.word	0x40020400
 8000ea8:	40020800 	.word	0x40020800
 8000eac:	40020c00 	.word	0x40020c00
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40021400 	.word	0x40021400
 8000eb8:	40021800 	.word	0x40021800
 8000ebc:	40021c00 	.word	0x40021c00
 8000ec0:	40022000 	.word	0x40022000

08000ec4 <GPIO_Init>:

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handler_t *pGPIOHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; //tem register
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

	//Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff0c 	bl	8000cf4 <GPIO_PeriClockControl>

	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_Pinconfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	795b      	ldrb	r3, [r3, #5]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d822      	bhi.n	8000f2a <GPIO_Init+0x66>
	{
		//the non interrupt mode
		temp = ((pGPIOHandle->GPIO_Pinconfig.GPIO_PinMode) << (2 * (pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber)));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	795b      	ldrb	r3, [r3, #5]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	791b      	ldrb	r3, [r3, #4]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * (pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber)));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	791b      	ldrb	r3, [r3, #4]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2103      	movs	r1, #3
 8000f04:	fa01 f303 	lsl.w	r3, r1, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	400a      	ands	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6819      	ldr	r1, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	e0da      	b.n	80010e0 <GPIO_Init+0x21c>
	} else
	{
		//this part will code later. (interrupt mode)
		if (pGPIOHandle->GPIO_Pinconfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	795b      	ldrb	r3, [r3, #5]
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d117      	bne.n	8000f62 <GPIO_Init+0x9e>
		{
			//1. configure the FTSR
			EXTI ->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber);
 8000f32:	4b47      	ldr	r3, [pc, #284]	; (8001050 <GPIO_Init+0x18c>)
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	7912      	ldrb	r2, [r2, #4]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	408a      	lsls	r2, r1
 8000f40:	4611      	mov	r1, r2
 8000f42:	4a43      	ldr	r2, [pc, #268]	; (8001050 <GPIO_Init+0x18c>)
 8000f44:	430b      	orrs	r3, r1
 8000f46:	60d3      	str	r3, [r2, #12]

			//Clear the correspondinf RSTR bit
			EXTI ->EXTI_RTSR &= ~(1 << pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber);
 8000f48:	4b41      	ldr	r3, [pc, #260]	; (8001050 <GPIO_Init+0x18c>)
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	7912      	ldrb	r2, [r2, #4]
 8000f50:	4611      	mov	r1, r2
 8000f52:	2201      	movs	r2, #1
 8000f54:	408a      	lsls	r2, r1
 8000f56:	43d2      	mvns	r2, r2
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4a3d      	ldr	r2, [pc, #244]	; (8001050 <GPIO_Init+0x18c>)
 8000f5c:	400b      	ands	r3, r1
 8000f5e:	6093      	str	r3, [r2, #8]
 8000f60:	e035      	b.n	8000fce <GPIO_Init+0x10a>
		}else if (pGPIOHandle->GPIO_Pinconfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	795b      	ldrb	r3, [r3, #5]
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	d117      	bne.n	8000f9a <GPIO_Init+0xd6>
		{
			//1. configure the RTSR
			EXTI ->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber);
 8000f6a:	4b39      	ldr	r3, [pc, #228]	; (8001050 <GPIO_Init+0x18c>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	7912      	ldrb	r2, [r2, #4]
 8000f72:	4611      	mov	r1, r2
 8000f74:	2201      	movs	r2, #1
 8000f76:	408a      	lsls	r2, r1
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4a35      	ldr	r2, [pc, #212]	; (8001050 <GPIO_Init+0x18c>)
 8000f7c:	430b      	orrs	r3, r1
 8000f7e:	6093      	str	r3, [r2, #8]

			//Clear the correspondinf FSTR bit
			EXTI ->EXTI_FTSR &= ~(1 << pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber);
 8000f80:	4b33      	ldr	r3, [pc, #204]	; (8001050 <GPIO_Init+0x18c>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	7912      	ldrb	r2, [r2, #4]
 8000f88:	4611      	mov	r1, r2
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	408a      	lsls	r2, r1
 8000f8e:	43d2      	mvns	r2, r2
 8000f90:	4611      	mov	r1, r2
 8000f92:	4a2f      	ldr	r2, [pc, #188]	; (8001050 <GPIO_Init+0x18c>)
 8000f94:	400b      	ands	r3, r1
 8000f96:	60d3      	str	r3, [r2, #12]
 8000f98:	e019      	b.n	8000fce <GPIO_Init+0x10a>
		}else if (pGPIOHandle->GPIO_Pinconfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	795b      	ldrb	r3, [r3, #5]
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d115      	bne.n	8000fce <GPIO_Init+0x10a>
		{
			//1. configure the both RTSR and FTSR
			EXTI ->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber);
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <GPIO_Init+0x18c>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	7912      	ldrb	r2, [r2, #4]
 8000faa:	4611      	mov	r1, r2
 8000fac:	2201      	movs	r2, #1
 8000fae:	408a      	lsls	r2, r1
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4a27      	ldr	r2, [pc, #156]	; (8001050 <GPIO_Init+0x18c>)
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	6093      	str	r3, [r2, #8]
			EXTI ->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber);
 8000fb8:	4b25      	ldr	r3, [pc, #148]	; (8001050 <GPIO_Init+0x18c>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	7912      	ldrb	r2, [r2, #4]
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	408a      	lsls	r2, r1
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4a21      	ldr	r2, [pc, #132]	; (8001050 <GPIO_Init+0x18c>)
 8000fca:	430b      	orrs	r3, r1
 8000fcc:	60d3      	str	r3, [r2, #12]
		}
			//2. configure the GPIO port selection in SYSCFG_EXITICR
			uint8_t	temp1 = pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber / 4 ;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	791b      	ldrb	r3, [r3, #4]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	74fb      	strb	r3, [r7, #19]
			uint8_t	temp2 = pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber % 4 ;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	791b      	ldrb	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	74bb      	strb	r3, [r7, #18]
			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <GPIO_Init+0x190>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d044      	beq.n	8001074 <GPIO_Init+0x1b0>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <GPIO_Init+0x194>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d02b      	beq.n	800104c <GPIO_Init+0x188>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a18      	ldr	r2, [pc, #96]	; (800105c <GPIO_Init+0x198>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d024      	beq.n	8001048 <GPIO_Init+0x184>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <GPIO_Init+0x19c>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d01d      	beq.n	8001044 <GPIO_Init+0x180>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a15      	ldr	r2, [pc, #84]	; (8001064 <GPIO_Init+0x1a0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d016      	beq.n	8001040 <GPIO_Init+0x17c>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a14      	ldr	r2, [pc, #80]	; (8001068 <GPIO_Init+0x1a4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d00f      	beq.n	800103c <GPIO_Init+0x178>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a12      	ldr	r2, [pc, #72]	; (800106c <GPIO_Init+0x1a8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d008      	beq.n	8001038 <GPIO_Init+0x174>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a11      	ldr	r2, [pc, #68]	; (8001070 <GPIO_Init+0x1ac>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d101      	bne.n	8001034 <GPIO_Init+0x170>
 8001030:	2307      	movs	r3, #7
 8001032:	e020      	b.n	8001076 <GPIO_Init+0x1b2>
 8001034:	2308      	movs	r3, #8
 8001036:	e01e      	b.n	8001076 <GPIO_Init+0x1b2>
 8001038:	2306      	movs	r3, #6
 800103a:	e01c      	b.n	8001076 <GPIO_Init+0x1b2>
 800103c:	2305      	movs	r3, #5
 800103e:	e01a      	b.n	8001076 <GPIO_Init+0x1b2>
 8001040:	2304      	movs	r3, #4
 8001042:	e018      	b.n	8001076 <GPIO_Init+0x1b2>
 8001044:	2303      	movs	r3, #3
 8001046:	e016      	b.n	8001076 <GPIO_Init+0x1b2>
 8001048:	2302      	movs	r3, #2
 800104a:	e014      	b.n	8001076 <GPIO_Init+0x1b2>
 800104c:	2301      	movs	r3, #1
 800104e:	e012      	b.n	8001076 <GPIO_Init+0x1b2>
 8001050:	40013c00 	.word	0x40013c00
 8001054:	40020000 	.word	0x40020000
 8001058:	40020400 	.word	0x40020400
 800105c:	40020800 	.word	0x40020800
 8001060:	40020c00 	.word	0x40020c00
 8001064:	40021000 	.word	0x40021000
 8001068:	40021400 	.word	0x40021400
 800106c:	40021800 	.word	0x40021800
 8001070:	40021c00 	.word	0x40021c00
 8001074:	2300      	movs	r3, #0
 8001076:	747b      	strb	r3, [r7, #17]
			SYSCFG_PCLK_EN();
 8001078:	4b69      	ldr	r3, [pc, #420]	; (8001220 <GPIO_Init+0x35c>)
 800107a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107c:	4a68      	ldr	r2, [pc, #416]	; (8001220 <GPIO_Init+0x35c>)
 800107e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001082:	6453      	str	r3, [r2, #68]	; 0x44
			SYSCFG->EXTICR[temp1] &= ~(0xF << (4 * temp2));  // This line is  missing
 8001084:	4a67      	ldr	r2, [pc, #412]	; (8001224 <GPIO_Init+0x360>)
 8001086:	7cfb      	ldrb	r3, [r7, #19]
 8001088:	3302      	adds	r3, #2
 800108a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800108e:	7cbb      	ldrb	r3, [r7, #18]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	210f      	movs	r1, #15
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	4961      	ldr	r1, [pc, #388]	; (8001224 <GPIO_Init+0x360>)
 800109e:	7cfb      	ldrb	r3, [r7, #19]
 80010a0:	4002      	ands	r2, r0
 80010a2:	3302      	adds	r3, #2
 80010a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			SYSCFG->EXTICR[temp1] |= portcode << (4 * temp2);
 80010a8:	4a5e      	ldr	r2, [pc, #376]	; (8001224 <GPIO_Init+0x360>)
 80010aa:	7cfb      	ldrb	r3, [r7, #19]
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010b2:	7c79      	ldrb	r1, [r7, #17]
 80010b4:	7cbb      	ldrb	r3, [r7, #18]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	4959      	ldr	r1, [pc, #356]	; (8001224 <GPIO_Init+0x360>)
 80010c0:	7cfb      	ldrb	r3, [r7, #19]
 80010c2:	4302      	orrs	r2, r0
 80010c4:	3302      	adds	r3, #2
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			//3. enable the exti interrupt delivery using IMR
			EXTI ->EXTI_IMR |= (1 << pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber);
 80010ca:	4b57      	ldr	r3, [pc, #348]	; (8001228 <GPIO_Init+0x364>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	7912      	ldrb	r2, [r2, #4]
 80010d2:	4611      	mov	r1, r2
 80010d4:	2201      	movs	r2, #1
 80010d6:	408a      	lsls	r2, r1
 80010d8:	4611      	mov	r1, r2
 80010da:	4a53      	ldr	r2, [pc, #332]	; (8001228 <GPIO_Init+0x364>)
 80010dc:	430b      	orrs	r3, r1
 80010de:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = ((pGPIOHandle->GPIO_Pinconfig.GPIO_pinSpeed)<<(2 * (pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber)));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	799b      	ldrb	r3, [r3, #6]
 80010e8:	461a      	mov	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	791b      	ldrb	r3, [r3, #4]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * (pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber)));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	791b      	ldrb	r3, [r3, #4]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2103      	movs	r1, #3
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	4619      	mov	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	400a      	ands	r2, r1
 8001112:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6899      	ldr	r1, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	430a      	orrs	r2, r1
 8001122:	609a      	str	r2, [r3, #8]
	temp = 0 ;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

	//3. configure the pupd settings
	temp = ((pGPIOHandle->GPIO_Pinconfig.GPIO_PinPuPdControl)<<(2 * (pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber)));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	79db      	ldrb	r3, [r3, #7]
 800112c:	461a      	mov	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	791b      	ldrb	r3, [r3, #4]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * (pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber)));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	791b      	ldrb	r3, [r3, #4]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2103      	movs	r1, #3
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	4619      	mov	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	400a      	ands	r2, r1
 8001156:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68d9      	ldr	r1, [r3, #12]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]
	temp = 0 ;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = ((pGPIOHandle->GPIO_Pinconfig.GPIO_PinOPType)<<(pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7a1b      	ldrb	r3, [r3, #8]
 8001170:	461a      	mov	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	791b      	ldrb	r3, [r3, #4]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber));						//clearing
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	791b      	ldrb	r3, [r3, #4]
 8001186:	4619      	mov	r1, r3
 8001188:	2301      	movs	r3, #1
 800118a:	408b      	lsls	r3, r1
 800118c:	43db      	mvns	r3, r3
 800118e:	4619      	mov	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	400a      	ands	r2, r1
 8001196:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6859      	ldr	r1, [r3, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	605a      	str	r2, [r3, #4]
	temp = 0 ;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_Pinconfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	795b      	ldrb	r3, [r3, #5]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d131      	bne.n	8001218 <GPIO_Init+0x354>
	{
		//configure the alt function registers
		uint8_t temp1 , temp2;

		temp1 = pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber / 8;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	791b      	ldrb	r3, [r3, #4]
 80011b8:	08db      	lsrs	r3, r3, #3
 80011ba:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_Pinconfig.GPIO_PinNumber % 8;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	791b      	ldrb	r3, [r3, #4]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	73fb      	strb	r3, [r7, #15]
		(pGPIOHandle->pGPIOx->AFR[temp1]) &= ~(0xF<<(4 * temp2));			//clearing
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	7c3a      	ldrb	r2, [r7, #16]
 80011cc:	3208      	adds	r2, #8
 80011ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220f      	movs	r2, #15
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	7c3a      	ldrb	r2, [r7, #16]
 80011e6:	4001      	ands	r1, r0
 80011e8:	3208      	adds	r2, #8
 80011ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		(pGPIOHandle->pGPIOx->AFR[temp1]) |= ((pGPIOHandle->GPIO_Pinconfig.GPIO_PinAltMode)<<(4 * temp2));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	7c3a      	ldrb	r2, [r7, #16]
 80011f4:	3208      	adds	r2, #8
 80011f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7a5b      	ldrb	r3, [r3, #9]
 80011fe:	461a      	mov	r2, r3
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	4618      	mov	r0, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	7c3a      	ldrb	r2, [r7, #16]
 8001210:	4301      	orrs	r1, r0
 8001212:	3208      	adds	r2, #8
 8001214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40013800 	.word	0x40013800
 8001228:	40013c00 	.word	0x40013c00

0800122c <I2C_PeriClockControl>:
 *
 * @Note              -  none

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d120      	bne.n	8001280 <I2C_PeriClockControl+0x54>
		{
			if (pI2Cx == I2C1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a22      	ldr	r2, [pc, #136]	; (80012cc <I2C_PeriClockControl+0xa0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d106      	bne.n	8001254 <I2C_PeriClockControl+0x28>
			{
				I2C1_PCLK_EN();
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <I2C_PeriClockControl+0xa4>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <I2C_PeriClockControl+0xa4>)
 800124c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
			else if (pI2Cx == I2C3)
			{
				I2C3_PCLK_DI();
			}
		}
}
 8001252:	e035      	b.n	80012c0 <I2C_PeriClockControl+0x94>
			else if (pI2Cx == I2C2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <I2C_PeriClockControl+0xa8>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d106      	bne.n	800126a <I2C_PeriClockControl+0x3e>
				I2C2_PCLK_EN();
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <I2C_PeriClockControl+0xa4>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <I2C_PeriClockControl+0xa4>)
 8001262:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001268:	e02a      	b.n	80012c0 <I2C_PeriClockControl+0x94>
			else if (pI2Cx == I2C3)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a1a      	ldr	r2, [pc, #104]	; (80012d8 <I2C_PeriClockControl+0xac>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d126      	bne.n	80012c0 <I2C_PeriClockControl+0x94>
				I2C3_PCLK_EN();
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <I2C_PeriClockControl+0xa4>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <I2C_PeriClockControl+0xa4>)
 8001278:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800127e:	e01f      	b.n	80012c0 <I2C_PeriClockControl+0x94>
			if (pI2Cx == I2C1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a12      	ldr	r2, [pc, #72]	; (80012cc <I2C_PeriClockControl+0xa0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d106      	bne.n	8001296 <I2C_PeriClockControl+0x6a>
				I2C1_PCLK_DI();
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <I2C_PeriClockControl+0xa4>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	4a10      	ldr	r2, [pc, #64]	; (80012d0 <I2C_PeriClockControl+0xa4>)
 800128e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001292:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001294:	e014      	b.n	80012c0 <I2C_PeriClockControl+0x94>
			else if (pI2Cx == I2C2)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <I2C_PeriClockControl+0xa8>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d106      	bne.n	80012ac <I2C_PeriClockControl+0x80>
				I2C2_PCLK_DI();
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <I2C_PeriClockControl+0xa4>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <I2C_PeriClockControl+0xa4>)
 80012a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012aa:	e009      	b.n	80012c0 <I2C_PeriClockControl+0x94>
			else if (pI2Cx == I2C3)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <I2C_PeriClockControl+0xac>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d105      	bne.n	80012c0 <I2C_PeriClockControl+0x94>
				I2C3_PCLK_DI();
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <I2C_PeriClockControl+0xa4>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <I2C_PeriClockControl+0xa4>)
 80012ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012be:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40005400 	.word	0x40005400
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40005800 	.word	0x40005800
 80012d8:	40005c00 	.word	0x40005c00

080012dc <RCC_GetPLLOutputClock>:

/*
 * Helper function
 */
uint32_t RCC_GetPLLOutputClock()
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	//Needs to be fixed
	return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
	...

080012ec <RCC_GetPCLK1Value>:
uint32_t RCC_GetPCLK1Value(void)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b08b      	sub	sp, #44	; 0x2c
 80012f0:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;
	uint8_t	clksrc,temp,AHBp,APBp;
	uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
 80012f2:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <RCC_GetPCLK1Value+0xe4>)
 80012f4:	f107 040c 	add.w	r4, r7, #12
 80012f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t APB_PreScaler[4] = {2,4,8,16};
 80012fe:	4a35      	ldr	r2, [pc, #212]	; (80013d4 <RCC_GetPCLK1Value+0xe8>)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001306:	e883 0003 	stmia.w	r3, {r0, r1}

	clksrc = (RCC->RCC_CFGR >>2) & 0x03;
 800130a:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <RCC_GetPCLK1Value+0xec>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(clksrc == 0)
 800131a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <RCC_GetPCLK1Value+0x3c>
	{
		SystemClk = 16000000;
 8001322:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <RCC_GetPCLK1Value+0xf0>)
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
 8001326:	e00d      	b.n	8001344 <RCC_GetPCLK1Value+0x58>
	}else if (clksrc == 1)
 8001328:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800132c:	2b01      	cmp	r3, #1
 800132e:	d102      	bne.n	8001336 <RCC_GetPCLK1Value+0x4a>
	{
		SystemClk = 8000000;
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <RCC_GetPCLK1Value+0xf4>)
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
 8001334:	e006      	b.n	8001344 <RCC_GetPCLK1Value+0x58>
	}else if (clksrc == 2)
 8001336:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800133a:	2b02      	cmp	r3, #2
 800133c:	d102      	bne.n	8001344 <RCC_GetPCLK1Value+0x58>
	{
		SystemClk = RCC_GetPLLOutputClock();
 800133e:	f7ff ffcd 	bl	80012dc <RCC_GetPLLOutputClock>
 8001342:	6278      	str	r0, [r7, #36]	; 0x24
	}

	//For AHB
	temp = (RCC->RCC_CFGR >>4) & 0xF;
 8001344:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <RCC_GetPCLK1Value+0xec>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f003 030f 	and.w	r3, r3, #15
 8001350:	f887 3020 	strb.w	r3, [r7, #32]
	if(temp < 8)
 8001354:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001358:	2b07      	cmp	r3, #7
 800135a:	d803      	bhi.n	8001364 <RCC_GetPCLK1Value+0x78>
	{
		AHBp = 1;
 800135c:	2301      	movs	r3, #1
 800135e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001362:	e00a      	b.n	800137a <RCC_GetPCLK1Value+0x8e>
	}else
	{
		AHBp = AHB_PreScaler[temp-8];
 8001364:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001368:	3b08      	subs	r3, #8
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001370:	4413      	add	r3, r2
 8001372:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}

	//For APB
	temp = (RCC->RCC_CFGR >>10) & 0x7;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <RCC_GetPCLK1Value+0xec>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	0a9b      	lsrs	r3, r3, #10
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	f887 3020 	strb.w	r3, [r7, #32]
	if(temp < 4)
 800138a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d803      	bhi.n	800139a <RCC_GetPCLK1Value+0xae>
	{
		APBp = 1;
 8001392:	2301      	movs	r3, #1
 8001394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001398:	e00a      	b.n	80013b0 <RCC_GetPCLK1Value+0xc4>
	}else
	{
		APBp = APB_PreScaler[temp-4];
 800139a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800139e:	3b04      	subs	r3, #4
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013a6:	4413      	add	r3, r2
 80013a8:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80013ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	pclk1 = (SystemClk/AHBp)/APBp;
 80013b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80013ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013be:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c2:	61fb      	str	r3, [r7, #28]
	return pclk1;
 80013c4:	69fb      	ldr	r3, [r7, #28]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	372c      	adds	r7, #44	; 0x2c
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd90      	pop	{r4, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	08003738 	.word	0x08003738
 80013d4:	08003748 	.word	0x08003748
 80013d8:	40023800 	.word	0x40023800
 80013dc:	00f42400 	.word	0x00f42400
 80013e0:	007a1200 	.word	0x007a1200

080013e4 <I2C_Init>:
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_Init(I2C_Handler_t *pI2CHandler)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	uint32_t temreg = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]

	//Enable the clock for the I2Cx peripheral
	I2C_PeriClockControl(pI2CHandler->pI2Cx, ENABLE);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2101      	movs	r1, #1
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff18 	bl	800122c <I2C_PeriClockControl>

	//Configure the FREQ field of CR2
	temreg = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
	temreg = RCC_GetPCLK1Value() / 1000000;
 8001400:	f7ff ff74 	bl	80012ec <RCC_GetPCLK1Value>
 8001404:	4602      	mov	r2, r0
 8001406:	4b5e      	ldr	r3, [pc, #376]	; (8001580 <I2C_Init+0x19c>)
 8001408:	fba3 2302 	umull	r2, r3, r3, r2
 800140c:	0c9b      	lsrs	r3, r3, #18
 800140e:	60fb      	str	r3, [r7, #12]
	pI2CHandler->pI2Cx->CR2 &= ~(0x3F);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800141e:	605a      	str	r2, [r3, #4]
	pI2CHandler->pI2Cx->CR2 |= (temreg & 0x3F);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6859      	ldr	r1, [r3, #4]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	430a      	orrs	r2, r1
 8001432:	605a      	str	r2, [r3, #4]

	//program the device own address
	temreg = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
	temreg = pI2CHandler->I2CConfig.I2C_DeviceAddress;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7a1b      	ldrb	r3, [r3, #8]
 800143c:	60fb      	str	r3, [r7, #12]
	pI2CHandler->pI2Cx->OAR1 &= ~(0x7F << 1);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 800144c:	609a      	str	r2, [r3, #8]
	pI2CHandler->pI2Cx->OAR1 |= (temreg << 1);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6899      	ldr	r1, [r3, #8]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	005a      	lsls	r2, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	609a      	str	r2, [r3, #8]
	pI2CHandler->pI2Cx->OAR1 |= (1<<14); //Don't know while just follow UM
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800146e:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	817b      	strh	r3, [r7, #10]
	temreg = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
	if(pI2CHandler->I2CConfig.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a41      	ldr	r2, [pc, #260]	; (8001584 <I2C_Init+0x1a0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d80f      	bhi.n	80014a2 <I2C_Init+0xbe>
	{
		//mode is standard mode
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandler->I2CConfig.I2C_SCLSpeed);
 8001482:	f7ff ff33 	bl	80012ec <RCC_GetPCLK1Value>
 8001486:	4602      	mov	r2, r0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001492:	817b      	strh	r3, [r7, #10]
		temreg |= ccr_value & 0xFFF;
 8001494:	897b      	ldrh	r3, [r7, #10]
 8001496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	e02d      	b.n	80014fe <I2C_Init+0x11a>
	}else
	{
		//mode is fast mode
		temreg |= (1<<15);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a8:	60fb      	str	r3, [r7, #12]
		temreg |= (pI2CHandler->I2CConfig.I2C_FMDutyCycle << 14);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	895b      	ldrh	r3, [r3, #10]
 80014ae:	039b      	lsls	r3, r3, #14
 80014b0:	461a      	mov	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]
		if (pI2CHandler->I2CConfig.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	895b      	ldrh	r3, [r3, #10]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10b      	bne.n	80014d8 <I2C_Init+0xf4>
		{
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandler->I2CConfig.I2C_SCLSpeed);
 80014c0:	f7ff ff14 	bl	80012ec <RCC_GetPCLK1Value>
 80014c4:	4601      	mov	r1, r0
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d4:	817b      	strh	r3, [r7, #10]
 80014d6:	e00c      	b.n	80014f2 <I2C_Init+0x10e>
		}else
		{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandler->I2CConfig.I2C_SCLSpeed);
 80014d8:	f7ff ff08 	bl	80012ec <RCC_GetPCLK1Value>
 80014dc:	4601      	mov	r1, r0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	009a      	lsls	r2, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f0:	817b      	strh	r3, [r7, #10]
		}
		temreg |= ccr_value & 0xFFF;
 80014f2:	897b      	ldrh	r3, [r7, #10]
 80014f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandler->pI2Cx->CCR &= ~(0xFFF);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800150c:	f023 030f 	bic.w	r3, r3, #15
 8001510:	61d3      	str	r3, [r2, #28]
	pI2CHandler->pI2Cx->CCR |= temreg;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	69d9      	ldr	r1, [r3, #28]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	430a      	orrs	r2, r1
 8001520:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandler->I2CConfig.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4a17      	ldr	r2, [pc, #92]	; (8001584 <I2C_Init+0x1a0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d809      	bhi.n	8001540 <I2C_Init+0x15c>
	{
		//mode is standard mode
		temreg = (RCC_GetPCLK1Value() / 1000000) + 1;
 800152c:	f7ff fede 	bl	80012ec <RCC_GetPCLK1Value>
 8001530:	4602      	mov	r2, r0
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <I2C_Init+0x19c>)
 8001534:	fba3 2302 	umull	r2, r3, r3, r2
 8001538:	0c9b      	lsrs	r3, r3, #18
 800153a:	3301      	adds	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e00b      	b.n	8001558 <I2C_Init+0x174>
	}else
	{
		//mode is fast mode
		temreg = ((RCC_GetPCLK1Value() * 3) / 10000000) + 1;
 8001540:	f7ff fed4 	bl	80012ec <RCC_GetPCLK1Value>
 8001544:	4602      	mov	r2, r0
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <I2C_Init+0x1a4>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	0d9b      	lsrs	r3, r3, #22
 8001554:	3301      	adds	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandler->pI2Cx->TRISE &= ~(0x3F);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6a1a      	ldr	r2, [r3, #32]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001566:	621a      	str	r2, [r3, #32]
	pI2CHandler->pI2Cx->TRISE |= temreg;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6a19      	ldr	r1, [r3, #32]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	430a      	orrs	r2, r1
 8001576:	621a      	str	r2, [r3, #32]
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	431bde83 	.word	0x431bde83
 8001584:	000186a0 	.word	0x000186a0
 8001588:	6b5fca6b 	.word	0x6b5fca6b

0800158c <I2C_SlaveSendData>:

	return busystate;
}

void I2C_SlaveSendData(I2C_RegDef_t *pI2C, uint8_t data)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
	pI2C->DR = data;
 8001598:	78fa      	ldrb	r2, [r7, #3]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	611a      	str	r2, [r3, #16]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <I2C_SlaveReceiveData>:
uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	return (uint8_t) pI2C->DR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	b2db      	uxtb	r3, r3
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <I2C_PeripheralControl>:


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDI)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
	if (EnOrDI == ENABLE)
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d106      	bne.n	80015e0 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= 1<<I2C_CR1_PE_Pos;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f043 0201 	orr.w	r2, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1<<I2C_CR1_PE_Pos);
	}
}
 80015de:	e005      	b.n	80015ec <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1<<I2C_CR1_PE_Pos);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f023 0201 	bic.w	r2, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	601a      	str	r2, [r3, #0]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <I2C_ExecuteAddressPhaseWrite>:
	}
	return FLAG_RESET;
}

void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t* pI2Cx,uint8_t SlaveAddr)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	460b      	mov	r3, r1
 8001600:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	70fb      	strb	r3, [r7, #3]

	//The LSB is R/nW bit which must be set to 0 for Write
	SlaveAddr &= ~(1);
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	70fb      	strb	r3, [r7, #3]

	pI2Cx->DR = SlaveAddr;
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	611a      	str	r2, [r3, #16]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <I2C_ExecuteAddressPhaseRead>:

void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t* pI2Cx,uint8_t SlaveAddr)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	70fb      	strb	r3, [r7, #3]

	//The LSB is R/nW bit which must be set to 1 for Read
	SlaveAddr |= 1;
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	70fb      	strb	r3, [r7, #3]

	pI2Cx->DR = SlaveAddr;
 800163a:	78fa      	ldrb	r2, [r7, #3]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	611a      	str	r2, [r3, #16]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t* pI2Cx,uint8_t EnorDi)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d106      	bne.n	800166a <I2C_ManageAcking+0x20>
	{
		pI2Cx->CR1 |= 1 << I2C_CR1_ACK_Pos;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	601a      	str	r2, [r3, #0]
	} else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK_Pos);
	}
}
 8001668:	e005      	b.n	8001676 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK_Pos);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	601a      	str	r2, [r3, #0]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <I2C_ClearADDRFlag>:

void I2C_ClearADDRFlag(I2C_Handler_t* pI2CHandler)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//Check for device mode
	if (pI2CHandler->pI2Cx->SR2 & (1 << I2C_SR2_MSL_Pos))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01f      	beq.n	80016d6 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if (pI2CHandler->TxRxState == I2C_BUSY_IN_RX)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	7f1b      	ldrb	r3, [r3, #28]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d112      	bne.n	80016c4 <I2C_ClearADDRFlag+0x44>
		{
			if (pI2CHandler->RxSize ==1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7f9b      	ldrb	r3, [r3, #30]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d11f      	bne.n	80016e6 <I2C_ClearADDRFlag+0x66>
			{
				//First disable the ack
				I2C_ManageAcking(pI2CHandler->pI2Cx, DISABLE);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ffcc 	bl	800164a <I2C_ManageAcking>

				//Clear the ADDR flag (read SR1 , read SR2)
				dummy_read = pI2CHandler->pI2Cx->SR1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandler->pI2Cx->SR2;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandler->pI2Cx->SR2;
		(void)dummy_read;

	}

}
 80016c2:	e010      	b.n	80016e6 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandler->pI2Cx->SR1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandler->pI2Cx->SR2;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	60fb      	str	r3, [r7, #12]
}
 80016d4:	e007      	b.n	80016e6 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandler->pI2Cx->SR1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandler->pI2Cx->SR2;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	60fb      	str	r3, [r7, #12]
}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t* pI2Cx)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP_Pos);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <I2C_IRQInterruptConfig>:
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_IRQInterruptConfig (uint8_t IRQNumber, uint8_t EnorDi)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	460a      	mov	r2, r1
 8001716:	71fb      	strb	r3, [r7, #7]
 8001718:	4613      	mov	r3, r2
 800171a:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE)
 800171c:	79bb      	ldrb	r3, [r7, #6]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d133      	bne.n	800178a <I2C_IRQInterruptConfig+0x7e>
	{
		if (IRQNumber <=31 )
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	2b1f      	cmp	r3, #31
 8001726:	d80a      	bhi.n	800173e <I2C_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= 1 << IRQNumber;
 8001728:	4b34      	ldr	r3, [pc, #208]	; (80017fc <I2C_IRQInterruptConfig+0xf0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	79fa      	ldrb	r2, [r7, #7]
 800172e:	2101      	movs	r1, #1
 8001730:	fa01 f202 	lsl.w	r2, r1, r2
 8001734:	4611      	mov	r1, r2
 8001736:	4a31      	ldr	r2, [pc, #196]	; (80017fc <I2C_IRQInterruptConfig+0xf0>)
 8001738:	430b      	orrs	r3, r1
 800173a:	6013      	str	r3, [r2, #0]
		{
			//program ICER2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 800173c:	e059      	b.n	80017f2 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >31 && IRQNumber < 64)
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b1f      	cmp	r3, #31
 8001742:	d90f      	bls.n	8001764 <I2C_IRQInterruptConfig+0x58>
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b3f      	cmp	r3, #63	; 0x3f
 8001748:	d80c      	bhi.n	8001764 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800174a:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <I2C_IRQInterruptConfig+0xf4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	79fa      	ldrb	r2, [r7, #7]
 8001750:	f002 021f 	and.w	r2, r2, #31
 8001754:	2101      	movs	r1, #1
 8001756:	fa01 f202 	lsl.w	r2, r1, r2
 800175a:	4611      	mov	r1, r2
 800175c:	4a28      	ldr	r2, [pc, #160]	; (8001800 <I2C_IRQInterruptConfig+0xf4>)
 800175e:	430b      	orrs	r3, r1
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e046      	b.n	80017f2 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >=64 && IRQNumber < 96)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	2b3f      	cmp	r3, #63	; 0x3f
 8001768:	d943      	bls.n	80017f2 <I2C_IRQInterruptConfig+0xe6>
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b5f      	cmp	r3, #95	; 0x5f
 800176e:	d840      	bhi.n	80017f2 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <I2C_IRQInterruptConfig+0xf8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	79fa      	ldrb	r2, [r7, #7]
 8001776:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800177a:	2101      	movs	r1, #1
 800177c:	fa01 f202 	lsl.w	r2, r1, r2
 8001780:	4611      	mov	r1, r2
 8001782:	4a20      	ldr	r2, [pc, #128]	; (8001804 <I2C_IRQInterruptConfig+0xf8>)
 8001784:	430b      	orrs	r3, r1
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	e033      	b.n	80017f2 <I2C_IRQInterruptConfig+0xe6>
		if (IRQNumber <=31 )
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b1f      	cmp	r3, #31
 800178e:	d80a      	bhi.n	80017a6 <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= 1 << IRQNumber;
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <I2C_IRQInterruptConfig+0xfc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	79fa      	ldrb	r2, [r7, #7]
 8001796:	2101      	movs	r1, #1
 8001798:	fa01 f202 	lsl.w	r2, r1, r2
 800179c:	4611      	mov	r1, r2
 800179e:	4a1a      	ldr	r2, [pc, #104]	; (8001808 <I2C_IRQInterruptConfig+0xfc>)
 80017a0:	430b      	orrs	r3, r1
 80017a2:	6013      	str	r3, [r2, #0]
}
 80017a4:	e025      	b.n	80017f2 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >31 && IRQNumber < 64)
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	2b1f      	cmp	r3, #31
 80017aa:	d90f      	bls.n	80017cc <I2C_IRQInterruptConfig+0xc0>
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	2b3f      	cmp	r3, #63	; 0x3f
 80017b0:	d80c      	bhi.n	80017cc <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <I2C_IRQInterruptConfig+0x100>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	f002 021f 	and.w	r2, r2, #31
 80017bc:	2101      	movs	r1, #1
 80017be:	fa01 f202 	lsl.w	r2, r1, r2
 80017c2:	4611      	mov	r1, r2
 80017c4:	4a11      	ldr	r2, [pc, #68]	; (800180c <I2C_IRQInterruptConfig+0x100>)
 80017c6:	430b      	orrs	r3, r1
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e012      	b.n	80017f2 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >=64 && IRQNumber < 96)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b3f      	cmp	r3, #63	; 0x3f
 80017d0:	d90f      	bls.n	80017f2 <I2C_IRQInterruptConfig+0xe6>
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b5f      	cmp	r3, #95	; 0x5f
 80017d6:	d80c      	bhi.n	80017f2 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <I2C_IRQInterruptConfig+0x104>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	79fa      	ldrb	r2, [r7, #7]
 80017de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80017e2:	2101      	movs	r1, #1
 80017e4:	fa01 f202 	lsl.w	r2, r1, r2
 80017e8:	4611      	mov	r1, r2
 80017ea:	4a09      	ldr	r2, [pc, #36]	; (8001810 <I2C_IRQInterruptConfig+0x104>)
 80017ec:	430b      	orrs	r3, r1
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	e7ff      	b.n	80017f2 <I2C_IRQInterruptConfig+0xe6>
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000e104 	.word	0xe000e104
 8001804:	e000e108 	.word	0xe000e108
 8001808:	e000e180 	.word	0xe000e180
 800180c:	e000e184 	.word	0xe000e184
 8001810:	e000e188 	.word	0xe000e188

08001814 <I2C_EV_IRQHandling>:
	*(NVIC_PR_BASE_ADDR + prx) &= ~(0xF << (shift_amout));
	*(NVIC_PR_BASE_ADDR + prx) |= (IRQpriority << (shift_amout));
}

void I2C_EV_IRQHandling(I2C_Handler_t *pI2CHandler)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1 = pI2CHandler->pI2Cx->CR2 & (1<<I2C_CR2_ITEVTEN_Pos);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001826:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandler->pI2Cx->CR2 & (1<<I2C_CR2_ITBUFEN_Pos);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001832:	613b      	str	r3, [r7, #16]

	temp3 = pI2CHandler->pI2Cx->SR1 & (1<<I2C_SR1_SB_Pos);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
	//1. Handler for Interrupt generated by SB event
	// Note : SB flag is only applicable in Master mode
	if (temp1 && temp3)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d01b      	beq.n	800187e <I2C_EV_IRQHandling+0x6a>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d018      	beq.n	800187e <I2C_EV_IRQHandling+0x6a>
	{
		//SB flag is set
		//The interrupt is generated because of SB event
		//This block will not be executed in slave mode because for slave SB is always zero
		//In this block lets executed the address phase
		if (pI2CHandler->TxRxState == I2C_BUSY_IN_TX)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7f1b      	ldrb	r3, [r3, #28]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d108      	bne.n	8001866 <I2C_EV_IRQHandling+0x52>
		{
			I2C_ExecuteAddressPhaseWrite(pI2CHandler->pI2Cx, pI2CHandler->DevAddr);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7f5b      	ldrb	r3, [r3, #29]
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f7ff fec9 	bl	80015f6 <I2C_ExecuteAddressPhaseWrite>
 8001864:	e00b      	b.n	800187e <I2C_EV_IRQHandling+0x6a>

		}else if(pI2CHandler->TxRxState == I2C_BUSY_IN_RX)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7f1b      	ldrb	r3, [r3, #28]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d107      	bne.n	800187e <I2C_EV_IRQHandling+0x6a>
		{
			I2C_ExecuteAddressPhaseRead(pI2CHandler->pI2Cx, pI2CHandler->DevAddr);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7f5b      	ldrb	r3, [r3, #29]
 8001876:	4619      	mov	r1, r3
 8001878:	4610      	mov	r0, r2
 800187a:	f7ff fed1 	bl	8001620 <I2C_ExecuteAddressPhaseRead>
		}
	}

	temp3 = pI2CHandler->pI2Cx->SR1 & (1<<I2C_SR1_ADDR_Pos);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	60fb      	str	r3, [r7, #12]
	//2. Handler for Interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//	     When slave mode : Address is matched with own address
	if (temp1 && temp3)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <I2C_EV_IRQHandling+0x88>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <I2C_EV_IRQHandling+0x88>
	{
		//ADDR flag is set
		I2C_ClearADDRFlag(pI2CHandler);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fef2 	bl	8001680 <I2C_ClearADDRFlag>
	}

	temp3 = pI2CHandler->pI2Cx->SR1 & (1<<I2C_SR1_BTF_Pos);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	60fb      	str	r3, [r7, #12]
	//3. Handle for Interrupt generated by BTF (Byte transfer finished) event
	if (temp1 && temp3)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d021      	beq.n	80018f2 <I2C_EV_IRQHandling+0xde>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d01e      	beq.n	80018f2 <I2C_EV_IRQHandling+0xde>
	{
		//BTF flag is set
		if(pI2CHandler->TxRxState == I2C_BUSY_IN_TX)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	7f1b      	ldrb	r3, [r3, #28]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d11a      	bne.n	80018f2 <I2C_EV_IRQHandling+0xde>
		{
			//make sure that TXE is also set
			if (pI2CHandler->pI2Cx->SR1 & (1<<I2C_SR1_TxE_Pos))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d013      	beq.n	80018f2 <I2C_EV_IRQHandling+0xde>
			{
				//BTF , TXR = 1
				if (pI2CHandler->TxLen == 0)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10f      	bne.n	80018f2 <I2C_EV_IRQHandling+0xde>
				{
					//1. Generate the STOP condition
					if (pI2CHandler->Sr == I2C_DISABLE_SR)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7fdb      	ldrb	r3, [r3, #31]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d104      	bne.n	80018e4 <I2C_EV_IRQHandling+0xd0>
					{
						I2C_GenerateStopCondition(pI2CHandler->pI2Cx);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff05 	bl	80016ee <I2C_GenerateStopCondition>
					}
					//2. Reset all the member elements of the handle structure
					I2C_CloseSendData(pI2CHandler);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f8d8 	bl	8001a9a <I2C_CloseSendData>

					//3. Notify that application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandler,I2C_EV_TX_CMPLT);
 80018ea:	2100      	movs	r1, #0
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff f98b 	bl	8000c08 <I2C_ApplicationEventCallback>
			//do nothing
			;
		}
	}

	temp3 = pI2CHandler->pI2Cx->SR1 & (1<<I2C_SR1_STOPF_Pos);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	60fb      	str	r3, [r7, #12]
	//4. Handler for Interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode.For master this flag will never be set
	//The below code block will not be executed by the master since STOPF will not set in master mode
	if (temp1 && temp3)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00c      	beq.n	800191e <I2C_EV_IRQHandling+0x10a>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <I2C_EV_IRQHandling+0x10a>
	{
		//STOPF flag is set
		//Clear the STOPF (read SR1 then Write to CR1 , read SR1 done above)
		pI2CHandler->pI2Cx->CR1 |= 0x0000;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	601a      	str	r2, [r3, #0]

		//Notify that application that STOP is detected
		I2C_ApplicationEventCallback(pI2CHandler,I2C_EV_STOP);
 8001916:	2101      	movs	r1, #1
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff f975 	bl	8000c08 <I2C_ApplicationEventCallback>

	}

	temp3 = pI2CHandler->pI2Cx->SR1 & (1<<I2C_SR1_TxE_Pos);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001928:	60fb      	str	r3, [r7, #12]
	//5. Handle For interrupt generated by TXE event
	if (temp1 && temp2 && temp3)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d01f      	beq.n	8001970 <I2C_EV_IRQHandling+0x15c>
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d01c      	beq.n	8001970 <I2C_EV_IRQHandling+0x15c>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d019      	beq.n	8001970 <I2C_EV_IRQHandling+0x15c>
	{
		//Check the device mode
		if (pI2CHandler->pI2Cx->SR2 & (1 << I2C_SR2_MSL_Pos))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <I2C_EV_IRQHandling+0x146>
		{
			//TxE flag is set
			//We have to do the data transmission
			if(pI2CHandler->TxRxState == I2C_BUSY_IN_TX)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7f1b      	ldrb	r3, [r3, #28]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d10e      	bne.n	8001970 <I2C_EV_IRQHandling+0x15c>
			{
				I2C_MasterHandlerTXEInterrupt(pI2CHandler);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f839 	bl	80019ca <I2C_MasterHandlerTXEInterrupt>
 8001958:	e00a      	b.n	8001970 <I2C_EV_IRQHandling+0x15c>
			}
		}else
		{
			//Slave mode
			//make sure that the slave is really in transmitter mode
			if(pI2CHandler->pI2Cx->SR2 & (1 << I2C_SR2_TRA_Pos))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <I2C_EV_IRQHandling+0x15c>
			{
				I2C_ApplicationEventCallback(pI2CHandler, I2C_EV_DATA_REQ);
 8001968:	2108      	movs	r1, #8
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff f94c 	bl	8000c08 <I2C_ApplicationEventCallback>
			}
		}
	}

	temp3 = pI2CHandler->pI2Cx->SR1 & (1<<I2C_SR1_RxNE_Pos);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	60fb      	str	r3, [r7, #12]
	//6. Handle For interrupt generated by RXNE event
	if (temp1 && temp2 && temp3)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d01f      	beq.n	80019c2 <I2C_EV_IRQHandling+0x1ae>
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d01c      	beq.n	80019c2 <I2C_EV_IRQHandling+0x1ae>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d019      	beq.n	80019c2 <I2C_EV_IRQHandling+0x1ae>
	{
		//Check the device mode
		if (pI2CHandler->pI2Cx->SR2 & (1 << I2C_SR2_MSL_Pos))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d007      	beq.n	80019ac <I2C_EV_IRQHandling+0x198>
		{
			//RxNE flag is set
			if(pI2CHandler->TxRxState == I2C_BUSY_IN_RX)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7f1b      	ldrb	r3, [r3, #28]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d10e      	bne.n	80019c2 <I2C_EV_IRQHandling+0x1ae>
			{
				I2C_MasterHandlerRXNEInterrupt(pI2CHandler);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f82d 	bl	8001a04 <I2C_MasterHandlerRXNEInterrupt>
			{
				I2C_ApplicationEventCallback(pI2CHandler, I2C_EV_DATA_RCV);
			}
		}
	}
}
 80019aa:	e00a      	b.n	80019c2 <I2C_EV_IRQHandling+0x1ae>
			if(pI2CHandler->pI2Cx->SR2 & (1 << I2C_SR2_TRA_Pos))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <I2C_EV_IRQHandling+0x1ae>
				I2C_ApplicationEventCallback(pI2CHandler, I2C_EV_DATA_RCV);
 80019ba:	2109      	movs	r1, #9
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff f923 	bl	8000c08 <I2C_ApplicationEventCallback>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <I2C_MasterHandlerTXEInterrupt>:

void I2C_MasterHandlerTXEInterrupt (I2C_Handler_t* pI2CHandler)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
		if(pI2CHandler->TxLen > 0)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00f      	beq.n	80019fa <I2C_MasterHandlerTXEInterrupt+0x30>
		{
			//1. Load the data in to DR
			pI2CHandler->pI2Cx->DR = *(pI2CHandler->pTxBuffer);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	781a      	ldrb	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	611a      	str	r2, [r3, #16]

			//2. Decrement the TxLen
			pI2CHandler->TxLen--;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	1e5a      	subs	r2, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	615a      	str	r2, [r3, #20]

			//3. Increment the buffer address
			pI2CHandler->pTxBuffer++;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	60da      	str	r2, [r3, #12]
		}
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <I2C_MasterHandlerRXNEInterrupt>:

void I2C_MasterHandlerRXNEInterrupt (I2C_Handler_t* pI2CHandler)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
		//We have to do to the data reception
		if(pI2CHandler->RxSize ==1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7f9b      	ldrb	r3, [r3, #30]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d10b      	bne.n	8001a2c <I2C_MasterHandlerRXNEInterrupt+0x28>
		{
			*pI2CHandler->pRxBuffer = pI2CHandler->pI2Cx->DR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691a      	ldr	r2, [r3, #16]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]
			pI2CHandler->RxLen--;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	1e5a      	subs	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	619a      	str	r2, [r3, #24]
		}

		if(pI2CHandler->RxSize >1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7f9b      	ldrb	r3, [r3, #30]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d91a      	bls.n	8001a6a <I2C_MasterHandlerRXNEInterrupt+0x66>
		{
			if (pI2CHandler->RxLen == 2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d105      	bne.n	8001a48 <I2C_MasterHandlerRXNEInterrupt+0x44>
			{
				//Clear the ACK bit
				I2C_ManageAcking(pI2CHandler->pI2Cx, DISABLE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fe01 	bl	800164a <I2C_ManageAcking>
			}

			//Read DR
			*pI2CHandler->pRxBuffer = pI2CHandler->pI2Cx->DR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]
			pI2CHandler->pRxBuffer++;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	611a      	str	r2, [r3, #16]
			pI2CHandler->RxLen--;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	1e5a      	subs	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	619a      	str	r2, [r3, #24]
		}
		if(pI2CHandler->RxLen == 0)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10f      	bne.n	8001a92 <I2C_MasterHandlerRXNEInterrupt+0x8e>
		{
			//Close the I2C data reception and notify application
			if (pI2CHandler->Sr == I2C_DISABLE_SR)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7fdb      	ldrb	r3, [r3, #31]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d104      	bne.n	8001a84 <I2C_MasterHandlerRXNEInterrupt+0x80>
			{
				//1. Generate the stop condition
				I2C_GenerateStopCondition(pI2CHandler->pI2Cx);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fe35 	bl	80016ee <I2C_GenerateStopCondition>
			}
			//2. Close the I2C rx
			I2C_CloseReceiveData(pI2CHandler);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f82a 	bl	8001ade <I2C_CloseReceiveData>

			//3. Notify the application
			I2C_ApplicationEventCallback(pI2CHandler, I2C_EV_RX_CMPLT);
 8001a8a:	2102      	movs	r1, #2
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff f8bb 	bl	8000c08 <I2C_ApplicationEventCallback>
		}
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handler_t* pI2C_Handler)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFFEN control bit
	pI2C_Handler->pI2Cx->CR2 &= ~(1<<I2C_CR2_ITBUFEN_Pos);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab0:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVTEN control bit
	pI2C_Handler->pI2Cx->CR2 &= ~(1<<I2C_CR2_ITEVTEN_Pos);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ac0:	605a      	str	r2, [r3, #4]

	pI2C_Handler->TxRxState = I2C_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	771a      	strb	r2, [r3, #28]
	pI2C_Handler->pTxBuffer = NULL;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
	pI2C_Handler->TxLen = 0;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	615a      	str	r2, [r3, #20]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <I2C_CloseReceiveData>:

void I2C_CloseReceiveData(I2C_Handler_t* pI2C_Handler)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFFEN control bit
	pI2C_Handler->pI2Cx->CR2 &= ~(1<<I2C_CR2_ITBUFEN_Pos);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001af4:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVTEN control bit
	pI2C_Handler->pI2Cx->CR2 &= ~(1<<I2C_CR2_ITEVTEN_Pos);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b04:	605a      	str	r2, [r3, #4]

	pI2C_Handler->TxRxState = I2C_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	771a      	strb	r2, [r3, #28]
	pI2C_Handler->pRxBuffer = NULL;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
	pI2C_Handler->RxLen = 0;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
	pI2C_Handler->RxSize = 0;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	779a      	strb	r2, [r3, #30]

	if (pI2C_Handler->I2CConfig.I2C_ACKControl == I2C_ACK_ENABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7a5b      	ldrb	r3, [r3, #9]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d105      	bne.n	8001b32 <I2C_CloseReceiveData+0x54>
	{
		I2C_ManageAcking(pI2C_Handler->pI2Cx, ENABLE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fd8c 	bl	800164a <I2C_ManageAcking>
	}
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <I2C_ER_IRQHandling>:

void I2C_ER_IRQHandling(I2C_Handler_t *pI2CHandler)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandler->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN_Pos);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandler->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR_Pos);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00e      	beq.n	8001b7e <I2C_ER_IRQHandling+0x44>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error
		//Implement the code to clear the buss error flag
		pI2CHandler->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR_Pos);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b74:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	    I2C_ApplicationEventCallback(pI2CHandler,I2C_ERROR_BERR);
 8001b76:	2103      	movs	r1, #3
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff f845 	bl	8000c08 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandler->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO_Pos );
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b88:	60bb      	str	r3, [r7, #8]

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandler->pI2Cx->SR1) & ( 1 << I2C_SR1_AF_Pos);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b94:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00e      	beq.n	8001bba <I2C_ER_IRQHandling+0x80>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <I2C_ER_IRQHandling+0x80>
	{
		//This is ACK failure error
	    //Implement the code to clear the ACK failure error flag
		pI2CHandler->pI2Cx->SR1 &= ~(1 << I2C_SR1_AF_Pos);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695a      	ldr	r2, [r3, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb0:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandler,I2C_ERROR_AF);
 8001bb2:	2105      	movs	r1, #5
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff f827 	bl	8000c08 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandler->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR_Pos);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc4:	60bb      	str	r3, [r7, #8]

		//Implement the code to notify the application about the error
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandler->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT_Pos);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd0:	60bb      	str	r3, [r7, #8]
	    //Implement the code to clear the Time out error flag

		//Implement the code to notify the application about the error
	}

}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <I2C_SlaveControlCallbackEvents>:

void I2C_SlaveControlCallbackEvents(I2C_RegDef_t* pI2Cx,uint8_t EnorDi)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d112      	bne.n	8001c12 <I2C_SlaveControlCallbackEvents+0x38>
	{
		//Implement the code to enable ITBUFEN Control Bit
		pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN_Pos);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVTEN Control Bit
		pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN_Pos);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN_Pos);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN_Pos);

		//Implement the code to enable ITERREN Control Bit
		pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN_Pos);
	}
}
 8001c10:	e011      	b.n	8001c36 <I2C_SlaveControlCallbackEvents+0x5c>
		pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN_Pos);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN_Pos);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN_Pos);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	605a      	str	r2, [r3, #4]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <__libc_init_array>:
 8001c40:	b570      	push	{r4, r5, r6, lr}
 8001c42:	4e0d      	ldr	r6, [pc, #52]	; (8001c78 <__libc_init_array+0x38>)
 8001c44:	4c0d      	ldr	r4, [pc, #52]	; (8001c7c <__libc_init_array+0x3c>)
 8001c46:	1ba4      	subs	r4, r4, r6
 8001c48:	10a4      	asrs	r4, r4, #2
 8001c4a:	2500      	movs	r5, #0
 8001c4c:	42a5      	cmp	r5, r4
 8001c4e:	d109      	bne.n	8001c64 <__libc_init_array+0x24>
 8001c50:	4e0b      	ldr	r6, [pc, #44]	; (8001c80 <__libc_init_array+0x40>)
 8001c52:	4c0c      	ldr	r4, [pc, #48]	; (8001c84 <__libc_init_array+0x44>)
 8001c54:	f001 fd62 	bl	800371c <_init>
 8001c58:	1ba4      	subs	r4, r4, r6
 8001c5a:	10a4      	asrs	r4, r4, #2
 8001c5c:	2500      	movs	r5, #0
 8001c5e:	42a5      	cmp	r5, r4
 8001c60:	d105      	bne.n	8001c6e <__libc_init_array+0x2e>
 8001c62:	bd70      	pop	{r4, r5, r6, pc}
 8001c64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c68:	4798      	blx	r3
 8001c6a:	3501      	adds	r5, #1
 8001c6c:	e7ee      	b.n	8001c4c <__libc_init_array+0xc>
 8001c6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c72:	4798      	blx	r3
 8001c74:	3501      	adds	r5, #1
 8001c76:	e7f2      	b.n	8001c5e <__libc_init_array+0x1e>
 8001c78:	080039d8 	.word	0x080039d8
 8001c7c:	080039d8 	.word	0x080039d8
 8001c80:	080039d8 	.word	0x080039d8
 8001c84:	080039dc 	.word	0x080039dc

08001c88 <memset>:
 8001c88:	4402      	add	r2, r0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d100      	bne.n	8001c92 <memset+0xa>
 8001c90:	4770      	bx	lr
 8001c92:	f803 1b01 	strb.w	r1, [r3], #1
 8001c96:	e7f9      	b.n	8001c8c <memset+0x4>

08001c98 <__cvt>:
 8001c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c9c:	b088      	sub	sp, #32
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8001ca2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001ca4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8001ca8:	461e      	mov	r6, r3
 8001caa:	f027 0720 	bic.w	r7, r7, #32
 8001cae:	bfbb      	ittet	lt
 8001cb0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8001cb4:	461e      	movlt	r6, r3
 8001cb6:	2300      	movge	r3, #0
 8001cb8:	232d      	movlt	r3, #45	; 0x2d
 8001cba:	2f46      	cmp	r7, #70	; 0x46
 8001cbc:	4614      	mov	r4, r2
 8001cbe:	700b      	strb	r3, [r1, #0]
 8001cc0:	d004      	beq.n	8001ccc <__cvt+0x34>
 8001cc2:	2f45      	cmp	r7, #69	; 0x45
 8001cc4:	d100      	bne.n	8001cc8 <__cvt+0x30>
 8001cc6:	3501      	adds	r5, #1
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e000      	b.n	8001cce <__cvt+0x36>
 8001ccc:	2303      	movs	r3, #3
 8001cce:	aa07      	add	r2, sp, #28
 8001cd0:	9204      	str	r2, [sp, #16]
 8001cd2:	aa06      	add	r2, sp, #24
 8001cd4:	e9cd a202 	strd	sl, r2, [sp, #8]
 8001cd8:	e9cd 3500 	strd	r3, r5, [sp]
 8001cdc:	4622      	mov	r2, r4
 8001cde:	4633      	mov	r3, r6
 8001ce0:	f000 fba2 	bl	8002428 <_dtoa_r>
 8001ce4:	2f47      	cmp	r7, #71	; 0x47
 8001ce6:	4680      	mov	r8, r0
 8001ce8:	d102      	bne.n	8001cf0 <__cvt+0x58>
 8001cea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001cec:	07db      	lsls	r3, r3, #31
 8001cee:	d526      	bpl.n	8001d3e <__cvt+0xa6>
 8001cf0:	2f46      	cmp	r7, #70	; 0x46
 8001cf2:	eb08 0905 	add.w	r9, r8, r5
 8001cf6:	d111      	bne.n	8001d1c <__cvt+0x84>
 8001cf8:	f898 3000 	ldrb.w	r3, [r8]
 8001cfc:	2b30      	cmp	r3, #48	; 0x30
 8001cfe:	d10a      	bne.n	8001d16 <__cvt+0x7e>
 8001d00:	2200      	movs	r2, #0
 8001d02:	2300      	movs	r3, #0
 8001d04:	4620      	mov	r0, r4
 8001d06:	4631      	mov	r1, r6
 8001d08:	f7fe fe9a 	bl	8000a40 <__aeabi_dcmpeq>
 8001d0c:	b918      	cbnz	r0, 8001d16 <__cvt+0x7e>
 8001d0e:	f1c5 0501 	rsb	r5, r5, #1
 8001d12:	f8ca 5000 	str.w	r5, [sl]
 8001d16:	f8da 3000 	ldr.w	r3, [sl]
 8001d1a:	4499      	add	r9, r3
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2300      	movs	r3, #0
 8001d20:	4620      	mov	r0, r4
 8001d22:	4631      	mov	r1, r6
 8001d24:	f7fe fe8c 	bl	8000a40 <__aeabi_dcmpeq>
 8001d28:	b938      	cbnz	r0, 8001d3a <__cvt+0xa2>
 8001d2a:	2230      	movs	r2, #48	; 0x30
 8001d2c:	9b07      	ldr	r3, [sp, #28]
 8001d2e:	454b      	cmp	r3, r9
 8001d30:	d205      	bcs.n	8001d3e <__cvt+0xa6>
 8001d32:	1c59      	adds	r1, r3, #1
 8001d34:	9107      	str	r1, [sp, #28]
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	e7f8      	b.n	8001d2c <__cvt+0x94>
 8001d3a:	f8cd 901c 	str.w	r9, [sp, #28]
 8001d3e:	9b07      	ldr	r3, [sp, #28]
 8001d40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001d42:	eba3 0308 	sub.w	r3, r3, r8
 8001d46:	4640      	mov	r0, r8
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	b008      	add	sp, #32
 8001d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001d50 <__exponent>:
 8001d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d52:	2900      	cmp	r1, #0
 8001d54:	4604      	mov	r4, r0
 8001d56:	bfba      	itte	lt
 8001d58:	4249      	neglt	r1, r1
 8001d5a:	232d      	movlt	r3, #45	; 0x2d
 8001d5c:	232b      	movge	r3, #43	; 0x2b
 8001d5e:	2909      	cmp	r1, #9
 8001d60:	f804 2b02 	strb.w	r2, [r4], #2
 8001d64:	7043      	strb	r3, [r0, #1]
 8001d66:	dd20      	ble.n	8001daa <__exponent+0x5a>
 8001d68:	f10d 0307 	add.w	r3, sp, #7
 8001d6c:	461f      	mov	r7, r3
 8001d6e:	260a      	movs	r6, #10
 8001d70:	fb91 f5f6 	sdiv	r5, r1, r6
 8001d74:	fb06 1115 	mls	r1, r6, r5, r1
 8001d78:	3130      	adds	r1, #48	; 0x30
 8001d7a:	2d09      	cmp	r5, #9
 8001d7c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001d80:	f103 32ff 	add.w	r2, r3, #4294967295
 8001d84:	4629      	mov	r1, r5
 8001d86:	dc09      	bgt.n	8001d9c <__exponent+0x4c>
 8001d88:	3130      	adds	r1, #48	; 0x30
 8001d8a:	3b02      	subs	r3, #2
 8001d8c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001d90:	42bb      	cmp	r3, r7
 8001d92:	4622      	mov	r2, r4
 8001d94:	d304      	bcc.n	8001da0 <__exponent+0x50>
 8001d96:	1a10      	subs	r0, r2, r0
 8001d98:	b003      	add	sp, #12
 8001d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	e7e7      	b.n	8001d70 <__exponent+0x20>
 8001da0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001da4:	f804 2b01 	strb.w	r2, [r4], #1
 8001da8:	e7f2      	b.n	8001d90 <__exponent+0x40>
 8001daa:	2330      	movs	r3, #48	; 0x30
 8001dac:	4419      	add	r1, r3
 8001dae:	7083      	strb	r3, [r0, #2]
 8001db0:	1d02      	adds	r2, r0, #4
 8001db2:	70c1      	strb	r1, [r0, #3]
 8001db4:	e7ef      	b.n	8001d96 <__exponent+0x46>
	...

08001db8 <_printf_float>:
 8001db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dbc:	b091      	sub	sp, #68	; 0x44
 8001dbe:	460c      	mov	r4, r1
 8001dc0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8001dc2:	4693      	mov	fp, r2
 8001dc4:	461e      	mov	r6, r3
 8001dc6:	4605      	mov	r5, r0
 8001dc8:	f001 f8e8 	bl	8002f9c <_localeconv_r>
 8001dcc:	6803      	ldr	r3, [r0, #0]
 8001dce:	9309      	str	r3, [sp, #36]	; 0x24
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fa09 	bl	80001e8 <strlen>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	930e      	str	r3, [sp, #56]	; 0x38
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	900a      	str	r0, [sp, #40]	; 0x28
 8001dde:	3307      	adds	r3, #7
 8001de0:	f023 0307 	bic.w	r3, r3, #7
 8001de4:	f103 0208 	add.w	r2, r3, #8
 8001de8:	f894 8018 	ldrb.w	r8, [r4, #24]
 8001dec:	f8d4 a000 	ldr.w	sl, [r4]
 8001df0:	603a      	str	r2, [r7, #0]
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8001dfa:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8001dfe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8001e02:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	4ba6      	ldr	r3, [pc, #664]	; (80020a4 <_printf_float+0x2ec>)
 8001e0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001e0c:	4638      	mov	r0, r7
 8001e0e:	f7fe fe49 	bl	8000aa4 <__aeabi_dcmpun>
 8001e12:	bb68      	cbnz	r0, 8001e70 <_printf_float+0xb8>
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	4ba2      	ldr	r3, [pc, #648]	; (80020a4 <_printf_float+0x2ec>)
 8001e1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001e1c:	4638      	mov	r0, r7
 8001e1e:	f7fe fe23 	bl	8000a68 <__aeabi_dcmple>
 8001e22:	bb28      	cbnz	r0, 8001e70 <_printf_float+0xb8>
 8001e24:	2200      	movs	r2, #0
 8001e26:	2300      	movs	r3, #0
 8001e28:	4638      	mov	r0, r7
 8001e2a:	4649      	mov	r1, r9
 8001e2c:	f7fe fe12 	bl	8000a54 <__aeabi_dcmplt>
 8001e30:	b110      	cbz	r0, 8001e38 <_printf_float+0x80>
 8001e32:	232d      	movs	r3, #45	; 0x2d
 8001e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e38:	4f9b      	ldr	r7, [pc, #620]	; (80020a8 <_printf_float+0x2f0>)
 8001e3a:	4b9c      	ldr	r3, [pc, #624]	; (80020ac <_printf_float+0x2f4>)
 8001e3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001e40:	bf98      	it	ls
 8001e42:	461f      	movls	r7, r3
 8001e44:	2303      	movs	r3, #3
 8001e46:	6123      	str	r3, [r4, #16]
 8001e48:	f02a 0304 	bic.w	r3, sl, #4
 8001e4c:	6023      	str	r3, [r4, #0]
 8001e4e:	f04f 0900 	mov.w	r9, #0
 8001e52:	9600      	str	r6, [sp, #0]
 8001e54:	465b      	mov	r3, fp
 8001e56:	aa0f      	add	r2, sp, #60	; 0x3c
 8001e58:	4621      	mov	r1, r4
 8001e5a:	4628      	mov	r0, r5
 8001e5c:	f000 f9e2 	bl	8002224 <_printf_common>
 8001e60:	3001      	adds	r0, #1
 8001e62:	f040 8090 	bne.w	8001f86 <_printf_float+0x1ce>
 8001e66:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6a:	b011      	add	sp, #68	; 0x44
 8001e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e70:	463a      	mov	r2, r7
 8001e72:	464b      	mov	r3, r9
 8001e74:	4638      	mov	r0, r7
 8001e76:	4649      	mov	r1, r9
 8001e78:	f7fe fe14 	bl	8000aa4 <__aeabi_dcmpun>
 8001e7c:	b110      	cbz	r0, 8001e84 <_printf_float+0xcc>
 8001e7e:	4f8c      	ldr	r7, [pc, #560]	; (80020b0 <_printf_float+0x2f8>)
 8001e80:	4b8c      	ldr	r3, [pc, #560]	; (80020b4 <_printf_float+0x2fc>)
 8001e82:	e7db      	b.n	8001e3c <_printf_float+0x84>
 8001e84:	6863      	ldr	r3, [r4, #4]
 8001e86:	1c59      	adds	r1, r3, #1
 8001e88:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8001e8c:	a90e      	add	r1, sp, #56	; 0x38
 8001e8e:	a80d      	add	r0, sp, #52	; 0x34
 8001e90:	d140      	bne.n	8001f14 <_printf_float+0x15c>
 8001e92:	2306      	movs	r3, #6
 8001e94:	6063      	str	r3, [r4, #4]
 8001e96:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8001e9a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8001e9e:	f04f 0c00 	mov.w	ip, #0
 8001ea2:	6863      	ldr	r3, [r4, #4]
 8001ea4:	6022      	str	r2, [r4, #0]
 8001ea6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	463a      	mov	r2, r7
 8001eae:	464b      	mov	r3, r9
 8001eb0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	f7ff feef 	bl	8001c98 <__cvt>
 8001eba:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8001ebe:	2b47      	cmp	r3, #71	; 0x47
 8001ec0:	4607      	mov	r7, r0
 8001ec2:	d109      	bne.n	8001ed8 <_printf_float+0x120>
 8001ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ec6:	1cd8      	adds	r0, r3, #3
 8001ec8:	db02      	blt.n	8001ed0 <_printf_float+0x118>
 8001eca:	6862      	ldr	r2, [r4, #4]
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	dd47      	ble.n	8001f60 <_printf_float+0x1a8>
 8001ed0:	f1a8 0802 	sub.w	r8, r8, #2
 8001ed4:	fa5f f888 	uxtb.w	r8, r8
 8001ed8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8001edc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001ede:	d824      	bhi.n	8001f2a <_printf_float+0x172>
 8001ee0:	3901      	subs	r1, #1
 8001ee2:	4642      	mov	r2, r8
 8001ee4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001ee8:	910d      	str	r1, [sp, #52]	; 0x34
 8001eea:	f7ff ff31 	bl	8001d50 <__exponent>
 8001eee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001ef0:	1813      	adds	r3, r2, r0
 8001ef2:	2a01      	cmp	r2, #1
 8001ef4:	4681      	mov	r9, r0
 8001ef6:	6123      	str	r3, [r4, #16]
 8001ef8:	dc02      	bgt.n	8001f00 <_printf_float+0x148>
 8001efa:	6822      	ldr	r2, [r4, #0]
 8001efc:	07d1      	lsls	r1, r2, #31
 8001efe:	d501      	bpl.n	8001f04 <_printf_float+0x14c>
 8001f00:	3301      	adds	r3, #1
 8001f02:	6123      	str	r3, [r4, #16]
 8001f04:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0a2      	beq.n	8001e52 <_printf_float+0x9a>
 8001f0c:	232d      	movs	r3, #45	; 0x2d
 8001f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f12:	e79e      	b.n	8001e52 <_printf_float+0x9a>
 8001f14:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8001f18:	f000 816e 	beq.w	80021f8 <_printf_float+0x440>
 8001f1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001f20:	d1b9      	bne.n	8001e96 <_printf_float+0xde>
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1b7      	bne.n	8001e96 <_printf_float+0xde>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e7b4      	b.n	8001e94 <_printf_float+0xdc>
 8001f2a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8001f2e:	d119      	bne.n	8001f64 <_printf_float+0x1ac>
 8001f30:	2900      	cmp	r1, #0
 8001f32:	6863      	ldr	r3, [r4, #4]
 8001f34:	dd0c      	ble.n	8001f50 <_printf_float+0x198>
 8001f36:	6121      	str	r1, [r4, #16]
 8001f38:	b913      	cbnz	r3, 8001f40 <_printf_float+0x188>
 8001f3a:	6822      	ldr	r2, [r4, #0]
 8001f3c:	07d2      	lsls	r2, r2, #31
 8001f3e:	d502      	bpl.n	8001f46 <_printf_float+0x18e>
 8001f40:	3301      	adds	r3, #1
 8001f42:	440b      	add	r3, r1
 8001f44:	6123      	str	r3, [r4, #16]
 8001f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f48:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f4a:	f04f 0900 	mov.w	r9, #0
 8001f4e:	e7d9      	b.n	8001f04 <_printf_float+0x14c>
 8001f50:	b913      	cbnz	r3, 8001f58 <_printf_float+0x1a0>
 8001f52:	6822      	ldr	r2, [r4, #0]
 8001f54:	07d0      	lsls	r0, r2, #31
 8001f56:	d501      	bpl.n	8001f5c <_printf_float+0x1a4>
 8001f58:	3302      	adds	r3, #2
 8001f5a:	e7f3      	b.n	8001f44 <_printf_float+0x18c>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e7f1      	b.n	8001f44 <_printf_float+0x18c>
 8001f60:	f04f 0867 	mov.w	r8, #103	; 0x67
 8001f64:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	db05      	blt.n	8001f78 <_printf_float+0x1c0>
 8001f6c:	6822      	ldr	r2, [r4, #0]
 8001f6e:	6123      	str	r3, [r4, #16]
 8001f70:	07d1      	lsls	r1, r2, #31
 8001f72:	d5e8      	bpl.n	8001f46 <_printf_float+0x18e>
 8001f74:	3301      	adds	r3, #1
 8001f76:	e7e5      	b.n	8001f44 <_printf_float+0x18c>
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bfd4      	ite	le
 8001f7c:	f1c3 0302 	rsble	r3, r3, #2
 8001f80:	2301      	movgt	r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	e7de      	b.n	8001f44 <_printf_float+0x18c>
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	055a      	lsls	r2, r3, #21
 8001f8a:	d407      	bmi.n	8001f9c <_printf_float+0x1e4>
 8001f8c:	6923      	ldr	r3, [r4, #16]
 8001f8e:	463a      	mov	r2, r7
 8001f90:	4659      	mov	r1, fp
 8001f92:	4628      	mov	r0, r5
 8001f94:	47b0      	blx	r6
 8001f96:	3001      	adds	r0, #1
 8001f98:	d129      	bne.n	8001fee <_printf_float+0x236>
 8001f9a:	e764      	b.n	8001e66 <_printf_float+0xae>
 8001f9c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8001fa0:	f240 80d7 	bls.w	8002152 <_printf_float+0x39a>
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001fac:	f7fe fd48 	bl	8000a40 <__aeabi_dcmpeq>
 8001fb0:	b388      	cbz	r0, 8002016 <_printf_float+0x25e>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	4a40      	ldr	r2, [pc, #256]	; (80020b8 <_printf_float+0x300>)
 8001fb6:	4659      	mov	r1, fp
 8001fb8:	4628      	mov	r0, r5
 8001fba:	47b0      	blx	r6
 8001fbc:	3001      	adds	r0, #1
 8001fbe:	f43f af52 	beq.w	8001e66 <_printf_float+0xae>
 8001fc2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	db02      	blt.n	8001fd0 <_printf_float+0x218>
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	07d8      	lsls	r0, r3, #31
 8001fce:	d50e      	bpl.n	8001fee <_printf_float+0x236>
 8001fd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001fd4:	4659      	mov	r1, fp
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	47b0      	blx	r6
 8001fda:	3001      	adds	r0, #1
 8001fdc:	f43f af43 	beq.w	8001e66 <_printf_float+0xae>
 8001fe0:	2700      	movs	r7, #0
 8001fe2:	f104 081a 	add.w	r8, r4, #26
 8001fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	42bb      	cmp	r3, r7
 8001fec:	dc09      	bgt.n	8002002 <_printf_float+0x24a>
 8001fee:	6823      	ldr	r3, [r4, #0]
 8001ff0:	079f      	lsls	r7, r3, #30
 8001ff2:	f100 80fd 	bmi.w	80021f0 <_printf_float+0x438>
 8001ff6:	68e0      	ldr	r0, [r4, #12]
 8001ff8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001ffa:	4298      	cmp	r0, r3
 8001ffc:	bfb8      	it	lt
 8001ffe:	4618      	movlt	r0, r3
 8002000:	e733      	b.n	8001e6a <_printf_float+0xb2>
 8002002:	2301      	movs	r3, #1
 8002004:	4642      	mov	r2, r8
 8002006:	4659      	mov	r1, fp
 8002008:	4628      	mov	r0, r5
 800200a:	47b0      	blx	r6
 800200c:	3001      	adds	r0, #1
 800200e:	f43f af2a 	beq.w	8001e66 <_printf_float+0xae>
 8002012:	3701      	adds	r7, #1
 8002014:	e7e7      	b.n	8001fe6 <_printf_float+0x22e>
 8002016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002018:	2b00      	cmp	r3, #0
 800201a:	dc2b      	bgt.n	8002074 <_printf_float+0x2bc>
 800201c:	2301      	movs	r3, #1
 800201e:	4a26      	ldr	r2, [pc, #152]	; (80020b8 <_printf_float+0x300>)
 8002020:	4659      	mov	r1, fp
 8002022:	4628      	mov	r0, r5
 8002024:	47b0      	blx	r6
 8002026:	3001      	adds	r0, #1
 8002028:	f43f af1d 	beq.w	8001e66 <_printf_float+0xae>
 800202c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800202e:	b923      	cbnz	r3, 800203a <_printf_float+0x282>
 8002030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002032:	b913      	cbnz	r3, 800203a <_printf_float+0x282>
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	07d9      	lsls	r1, r3, #31
 8002038:	d5d9      	bpl.n	8001fee <_printf_float+0x236>
 800203a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800203e:	4659      	mov	r1, fp
 8002040:	4628      	mov	r0, r5
 8002042:	47b0      	blx	r6
 8002044:	3001      	adds	r0, #1
 8002046:	f43f af0e 	beq.w	8001e66 <_printf_float+0xae>
 800204a:	f04f 0800 	mov.w	r8, #0
 800204e:	f104 091a 	add.w	r9, r4, #26
 8002052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002054:	425b      	negs	r3, r3
 8002056:	4543      	cmp	r3, r8
 8002058:	dc01      	bgt.n	800205e <_printf_float+0x2a6>
 800205a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800205c:	e797      	b.n	8001f8e <_printf_float+0x1d6>
 800205e:	2301      	movs	r3, #1
 8002060:	464a      	mov	r2, r9
 8002062:	4659      	mov	r1, fp
 8002064:	4628      	mov	r0, r5
 8002066:	47b0      	blx	r6
 8002068:	3001      	adds	r0, #1
 800206a:	f43f aefc 	beq.w	8001e66 <_printf_float+0xae>
 800206e:	f108 0801 	add.w	r8, r8, #1
 8002072:	e7ee      	b.n	8002052 <_printf_float+0x29a>
 8002074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002076:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002078:	429a      	cmp	r2, r3
 800207a:	bfa8      	it	ge
 800207c:	461a      	movge	r2, r3
 800207e:	2a00      	cmp	r2, #0
 8002080:	4690      	mov	r8, r2
 8002082:	dd07      	ble.n	8002094 <_printf_float+0x2dc>
 8002084:	4613      	mov	r3, r2
 8002086:	4659      	mov	r1, fp
 8002088:	463a      	mov	r2, r7
 800208a:	4628      	mov	r0, r5
 800208c:	47b0      	blx	r6
 800208e:	3001      	adds	r0, #1
 8002090:	f43f aee9 	beq.w	8001e66 <_printf_float+0xae>
 8002094:	f104 031a 	add.w	r3, r4, #26
 8002098:	f04f 0a00 	mov.w	sl, #0
 800209c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80020a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80020a2:	e015      	b.n	80020d0 <_printf_float+0x318>
 80020a4:	7fefffff 	.word	0x7fefffff
 80020a8:	08003754 	.word	0x08003754
 80020ac:	08003750 	.word	0x08003750
 80020b0:	0800375c 	.word	0x0800375c
 80020b4:	08003758 	.word	0x08003758
 80020b8:	08003760 	.word	0x08003760
 80020bc:	2301      	movs	r3, #1
 80020be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80020c0:	4659      	mov	r1, fp
 80020c2:	4628      	mov	r0, r5
 80020c4:	47b0      	blx	r6
 80020c6:	3001      	adds	r0, #1
 80020c8:	f43f aecd 	beq.w	8001e66 <_printf_float+0xae>
 80020cc:	f10a 0a01 	add.w	sl, sl, #1
 80020d0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80020d4:	eba9 0308 	sub.w	r3, r9, r8
 80020d8:	4553      	cmp	r3, sl
 80020da:	dcef      	bgt.n	80020bc <_printf_float+0x304>
 80020dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80020e0:	429a      	cmp	r2, r3
 80020e2:	444f      	add	r7, r9
 80020e4:	db14      	blt.n	8002110 <_printf_float+0x358>
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	07da      	lsls	r2, r3, #31
 80020ea:	d411      	bmi.n	8002110 <_printf_float+0x358>
 80020ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80020f0:	eba3 0209 	sub.w	r2, r3, r9
 80020f4:	eba3 0901 	sub.w	r9, r3, r1
 80020f8:	4591      	cmp	r9, r2
 80020fa:	bfa8      	it	ge
 80020fc:	4691      	movge	r9, r2
 80020fe:	f1b9 0f00 	cmp.w	r9, #0
 8002102:	dc0d      	bgt.n	8002120 <_printf_float+0x368>
 8002104:	2700      	movs	r7, #0
 8002106:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800210a:	f104 081a 	add.w	r8, r4, #26
 800210e:	e018      	b.n	8002142 <_printf_float+0x38a>
 8002110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002114:	4659      	mov	r1, fp
 8002116:	4628      	mov	r0, r5
 8002118:	47b0      	blx	r6
 800211a:	3001      	adds	r0, #1
 800211c:	d1e6      	bne.n	80020ec <_printf_float+0x334>
 800211e:	e6a2      	b.n	8001e66 <_printf_float+0xae>
 8002120:	464b      	mov	r3, r9
 8002122:	463a      	mov	r2, r7
 8002124:	4659      	mov	r1, fp
 8002126:	4628      	mov	r0, r5
 8002128:	47b0      	blx	r6
 800212a:	3001      	adds	r0, #1
 800212c:	d1ea      	bne.n	8002104 <_printf_float+0x34c>
 800212e:	e69a      	b.n	8001e66 <_printf_float+0xae>
 8002130:	2301      	movs	r3, #1
 8002132:	4642      	mov	r2, r8
 8002134:	4659      	mov	r1, fp
 8002136:	4628      	mov	r0, r5
 8002138:	47b0      	blx	r6
 800213a:	3001      	adds	r0, #1
 800213c:	f43f ae93 	beq.w	8001e66 <_printf_float+0xae>
 8002140:	3701      	adds	r7, #1
 8002142:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	eba3 0309 	sub.w	r3, r3, r9
 800214c:	42bb      	cmp	r3, r7
 800214e:	dcef      	bgt.n	8002130 <_printf_float+0x378>
 8002150:	e74d      	b.n	8001fee <_printf_float+0x236>
 8002152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002154:	2a01      	cmp	r2, #1
 8002156:	dc01      	bgt.n	800215c <_printf_float+0x3a4>
 8002158:	07db      	lsls	r3, r3, #31
 800215a:	d538      	bpl.n	80021ce <_printf_float+0x416>
 800215c:	2301      	movs	r3, #1
 800215e:	463a      	mov	r2, r7
 8002160:	4659      	mov	r1, fp
 8002162:	4628      	mov	r0, r5
 8002164:	47b0      	blx	r6
 8002166:	3001      	adds	r0, #1
 8002168:	f43f ae7d 	beq.w	8001e66 <_printf_float+0xae>
 800216c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002170:	4659      	mov	r1, fp
 8002172:	4628      	mov	r0, r5
 8002174:	47b0      	blx	r6
 8002176:	3001      	adds	r0, #1
 8002178:	f107 0701 	add.w	r7, r7, #1
 800217c:	f43f ae73 	beq.w	8001e66 <_printf_float+0xae>
 8002180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002182:	2200      	movs	r2, #0
 8002184:	f103 38ff 	add.w	r8, r3, #4294967295
 8002188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800218c:	2300      	movs	r3, #0
 800218e:	f7fe fc57 	bl	8000a40 <__aeabi_dcmpeq>
 8002192:	b9c0      	cbnz	r0, 80021c6 <_printf_float+0x40e>
 8002194:	4643      	mov	r3, r8
 8002196:	463a      	mov	r2, r7
 8002198:	4659      	mov	r1, fp
 800219a:	4628      	mov	r0, r5
 800219c:	47b0      	blx	r6
 800219e:	3001      	adds	r0, #1
 80021a0:	d10d      	bne.n	80021be <_printf_float+0x406>
 80021a2:	e660      	b.n	8001e66 <_printf_float+0xae>
 80021a4:	2301      	movs	r3, #1
 80021a6:	4642      	mov	r2, r8
 80021a8:	4659      	mov	r1, fp
 80021aa:	4628      	mov	r0, r5
 80021ac:	47b0      	blx	r6
 80021ae:	3001      	adds	r0, #1
 80021b0:	f43f ae59 	beq.w	8001e66 <_printf_float+0xae>
 80021b4:	3701      	adds	r7, #1
 80021b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80021b8:	3b01      	subs	r3, #1
 80021ba:	42bb      	cmp	r3, r7
 80021bc:	dcf2      	bgt.n	80021a4 <_printf_float+0x3ec>
 80021be:	464b      	mov	r3, r9
 80021c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80021c4:	e6e4      	b.n	8001f90 <_printf_float+0x1d8>
 80021c6:	2700      	movs	r7, #0
 80021c8:	f104 081a 	add.w	r8, r4, #26
 80021cc:	e7f3      	b.n	80021b6 <_printf_float+0x3fe>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e7e1      	b.n	8002196 <_printf_float+0x3de>
 80021d2:	2301      	movs	r3, #1
 80021d4:	4642      	mov	r2, r8
 80021d6:	4659      	mov	r1, fp
 80021d8:	4628      	mov	r0, r5
 80021da:	47b0      	blx	r6
 80021dc:	3001      	adds	r0, #1
 80021de:	f43f ae42 	beq.w	8001e66 <_printf_float+0xae>
 80021e2:	3701      	adds	r7, #1
 80021e4:	68e3      	ldr	r3, [r4, #12]
 80021e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	42bb      	cmp	r3, r7
 80021ec:	dcf1      	bgt.n	80021d2 <_printf_float+0x41a>
 80021ee:	e702      	b.n	8001ff6 <_printf_float+0x23e>
 80021f0:	2700      	movs	r7, #0
 80021f2:	f104 0819 	add.w	r8, r4, #25
 80021f6:	e7f5      	b.n	80021e4 <_printf_float+0x42c>
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f43f ae94 	beq.w	8001f26 <_printf_float+0x16e>
 80021fe:	f04f 0c00 	mov.w	ip, #0
 8002202:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002206:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800220a:	6022      	str	r2, [r4, #0]
 800220c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002210:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	463a      	mov	r2, r7
 8002218:	464b      	mov	r3, r9
 800221a:	4628      	mov	r0, r5
 800221c:	f7ff fd3c 	bl	8001c98 <__cvt>
 8002220:	4607      	mov	r7, r0
 8002222:	e64f      	b.n	8001ec4 <_printf_float+0x10c>

08002224 <_printf_common>:
 8002224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002228:	4691      	mov	r9, r2
 800222a:	461f      	mov	r7, r3
 800222c:	688a      	ldr	r2, [r1, #8]
 800222e:	690b      	ldr	r3, [r1, #16]
 8002230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002234:	4293      	cmp	r3, r2
 8002236:	bfb8      	it	lt
 8002238:	4613      	movlt	r3, r2
 800223a:	f8c9 3000 	str.w	r3, [r9]
 800223e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002242:	4606      	mov	r6, r0
 8002244:	460c      	mov	r4, r1
 8002246:	b112      	cbz	r2, 800224e <_printf_common+0x2a>
 8002248:	3301      	adds	r3, #1
 800224a:	f8c9 3000 	str.w	r3, [r9]
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	0699      	lsls	r1, r3, #26
 8002252:	bf42      	ittt	mi
 8002254:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002258:	3302      	addmi	r3, #2
 800225a:	f8c9 3000 	strmi.w	r3, [r9]
 800225e:	6825      	ldr	r5, [r4, #0]
 8002260:	f015 0506 	ands.w	r5, r5, #6
 8002264:	d107      	bne.n	8002276 <_printf_common+0x52>
 8002266:	f104 0a19 	add.w	sl, r4, #25
 800226a:	68e3      	ldr	r3, [r4, #12]
 800226c:	f8d9 2000 	ldr.w	r2, [r9]
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	42ab      	cmp	r3, r5
 8002274:	dc28      	bgt.n	80022c8 <_printf_common+0xa4>
 8002276:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800227a:	6822      	ldr	r2, [r4, #0]
 800227c:	3300      	adds	r3, #0
 800227e:	bf18      	it	ne
 8002280:	2301      	movne	r3, #1
 8002282:	0692      	lsls	r2, r2, #26
 8002284:	d42d      	bmi.n	80022e2 <_printf_common+0xbe>
 8002286:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800228a:	4639      	mov	r1, r7
 800228c:	4630      	mov	r0, r6
 800228e:	47c0      	blx	r8
 8002290:	3001      	adds	r0, #1
 8002292:	d020      	beq.n	80022d6 <_printf_common+0xb2>
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	68e5      	ldr	r5, [r4, #12]
 8002298:	f8d9 2000 	ldr.w	r2, [r9]
 800229c:	f003 0306 	and.w	r3, r3, #6
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	bf08      	it	eq
 80022a4:	1aad      	subeq	r5, r5, r2
 80022a6:	68a3      	ldr	r3, [r4, #8]
 80022a8:	6922      	ldr	r2, [r4, #16]
 80022aa:	bf0c      	ite	eq
 80022ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022b0:	2500      	movne	r5, #0
 80022b2:	4293      	cmp	r3, r2
 80022b4:	bfc4      	itt	gt
 80022b6:	1a9b      	subgt	r3, r3, r2
 80022b8:	18ed      	addgt	r5, r5, r3
 80022ba:	f04f 0900 	mov.w	r9, #0
 80022be:	341a      	adds	r4, #26
 80022c0:	454d      	cmp	r5, r9
 80022c2:	d11a      	bne.n	80022fa <_printf_common+0xd6>
 80022c4:	2000      	movs	r0, #0
 80022c6:	e008      	b.n	80022da <_printf_common+0xb6>
 80022c8:	2301      	movs	r3, #1
 80022ca:	4652      	mov	r2, sl
 80022cc:	4639      	mov	r1, r7
 80022ce:	4630      	mov	r0, r6
 80022d0:	47c0      	blx	r8
 80022d2:	3001      	adds	r0, #1
 80022d4:	d103      	bne.n	80022de <_printf_common+0xba>
 80022d6:	f04f 30ff 	mov.w	r0, #4294967295
 80022da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022de:	3501      	adds	r5, #1
 80022e0:	e7c3      	b.n	800226a <_printf_common+0x46>
 80022e2:	18e1      	adds	r1, r4, r3
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	2030      	movs	r0, #48	; 0x30
 80022e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022ec:	4422      	add	r2, r4
 80022ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022f6:	3302      	adds	r3, #2
 80022f8:	e7c5      	b.n	8002286 <_printf_common+0x62>
 80022fa:	2301      	movs	r3, #1
 80022fc:	4622      	mov	r2, r4
 80022fe:	4639      	mov	r1, r7
 8002300:	4630      	mov	r0, r6
 8002302:	47c0      	blx	r8
 8002304:	3001      	adds	r0, #1
 8002306:	d0e6      	beq.n	80022d6 <_printf_common+0xb2>
 8002308:	f109 0901 	add.w	r9, r9, #1
 800230c:	e7d8      	b.n	80022c0 <_printf_common+0x9c>

0800230e <quorem>:
 800230e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002312:	6903      	ldr	r3, [r0, #16]
 8002314:	690c      	ldr	r4, [r1, #16]
 8002316:	42a3      	cmp	r3, r4
 8002318:	4680      	mov	r8, r0
 800231a:	f2c0 8082 	blt.w	8002422 <quorem+0x114>
 800231e:	3c01      	subs	r4, #1
 8002320:	f101 0714 	add.w	r7, r1, #20
 8002324:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002328:	f100 0614 	add.w	r6, r0, #20
 800232c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002330:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002334:	eb06 030c 	add.w	r3, r6, ip
 8002338:	3501      	adds	r5, #1
 800233a:	eb07 090c 	add.w	r9, r7, ip
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	fbb0 f5f5 	udiv	r5, r0, r5
 8002344:	b395      	cbz	r5, 80023ac <quorem+0x9e>
 8002346:	f04f 0a00 	mov.w	sl, #0
 800234a:	4638      	mov	r0, r7
 800234c:	46b6      	mov	lr, r6
 800234e:	46d3      	mov	fp, sl
 8002350:	f850 2b04 	ldr.w	r2, [r0], #4
 8002354:	b293      	uxth	r3, r2
 8002356:	fb05 a303 	mla	r3, r5, r3, sl
 800235a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800235e:	b29b      	uxth	r3, r3
 8002360:	ebab 0303 	sub.w	r3, fp, r3
 8002364:	0c12      	lsrs	r2, r2, #16
 8002366:	f8de b000 	ldr.w	fp, [lr]
 800236a:	fb05 a202 	mla	r2, r5, r2, sl
 800236e:	fa13 f38b 	uxtah	r3, r3, fp
 8002372:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002376:	fa1f fb82 	uxth.w	fp, r2
 800237a:	f8de 2000 	ldr.w	r2, [lr]
 800237e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002382:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002386:	b29b      	uxth	r3, r3
 8002388:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800238c:	4581      	cmp	r9, r0
 800238e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002392:	f84e 3b04 	str.w	r3, [lr], #4
 8002396:	d2db      	bcs.n	8002350 <quorem+0x42>
 8002398:	f856 300c 	ldr.w	r3, [r6, ip]
 800239c:	b933      	cbnz	r3, 80023ac <quorem+0x9e>
 800239e:	9b01      	ldr	r3, [sp, #4]
 80023a0:	3b04      	subs	r3, #4
 80023a2:	429e      	cmp	r6, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	d330      	bcc.n	800240a <quorem+0xfc>
 80023a8:	f8c8 4010 	str.w	r4, [r8, #16]
 80023ac:	4640      	mov	r0, r8
 80023ae:	f001 f82b 	bl	8003408 <__mcmp>
 80023b2:	2800      	cmp	r0, #0
 80023b4:	db25      	blt.n	8002402 <quorem+0xf4>
 80023b6:	3501      	adds	r5, #1
 80023b8:	4630      	mov	r0, r6
 80023ba:	f04f 0c00 	mov.w	ip, #0
 80023be:	f857 2b04 	ldr.w	r2, [r7], #4
 80023c2:	f8d0 e000 	ldr.w	lr, [r0]
 80023c6:	b293      	uxth	r3, r2
 80023c8:	ebac 0303 	sub.w	r3, ip, r3
 80023cc:	0c12      	lsrs	r2, r2, #16
 80023ce:	fa13 f38e 	uxtah	r3, r3, lr
 80023d2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80023d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80023da:	b29b      	uxth	r3, r3
 80023dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80023e0:	45b9      	cmp	r9, r7
 80023e2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80023e6:	f840 3b04 	str.w	r3, [r0], #4
 80023ea:	d2e8      	bcs.n	80023be <quorem+0xb0>
 80023ec:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80023f0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80023f4:	b92a      	cbnz	r2, 8002402 <quorem+0xf4>
 80023f6:	3b04      	subs	r3, #4
 80023f8:	429e      	cmp	r6, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	d30b      	bcc.n	8002416 <quorem+0x108>
 80023fe:	f8c8 4010 	str.w	r4, [r8, #16]
 8002402:	4628      	mov	r0, r5
 8002404:	b003      	add	sp, #12
 8002406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	3b04      	subs	r3, #4
 800240e:	2a00      	cmp	r2, #0
 8002410:	d1ca      	bne.n	80023a8 <quorem+0x9a>
 8002412:	3c01      	subs	r4, #1
 8002414:	e7c5      	b.n	80023a2 <quorem+0x94>
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	3b04      	subs	r3, #4
 800241a:	2a00      	cmp	r2, #0
 800241c:	d1ef      	bne.n	80023fe <quorem+0xf0>
 800241e:	3c01      	subs	r4, #1
 8002420:	e7ea      	b.n	80023f8 <quorem+0xea>
 8002422:	2000      	movs	r0, #0
 8002424:	e7ee      	b.n	8002404 <quorem+0xf6>
	...

08002428 <_dtoa_r>:
 8002428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800242c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800242e:	b095      	sub	sp, #84	; 0x54
 8002430:	4616      	mov	r6, r2
 8002432:	461f      	mov	r7, r3
 8002434:	4604      	mov	r4, r0
 8002436:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800243a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800243e:	b93d      	cbnz	r5, 8002450 <_dtoa_r+0x28>
 8002440:	2010      	movs	r0, #16
 8002442:	f000 fdb9 	bl	8002fb8 <malloc>
 8002446:	6260      	str	r0, [r4, #36]	; 0x24
 8002448:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800244c:	6005      	str	r5, [r0, #0]
 800244e:	60c5      	str	r5, [r0, #12]
 8002450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002452:	6819      	ldr	r1, [r3, #0]
 8002454:	b151      	cbz	r1, 800246c <_dtoa_r+0x44>
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	604a      	str	r2, [r1, #4]
 800245a:	2301      	movs	r3, #1
 800245c:	4093      	lsls	r3, r2
 800245e:	608b      	str	r3, [r1, #8]
 8002460:	4620      	mov	r0, r4
 8002462:	f000 fdf0 	bl	8003046 <_Bfree>
 8002466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	1e3b      	subs	r3, r7, #0
 800246e:	bfbb      	ittet	lt
 8002470:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002474:	9303      	strlt	r3, [sp, #12]
 8002476:	2300      	movge	r3, #0
 8002478:	2201      	movlt	r2, #1
 800247a:	bfac      	ite	ge
 800247c:	f8c8 3000 	strge.w	r3, [r8]
 8002480:	f8c8 2000 	strlt.w	r2, [r8]
 8002484:	4bae      	ldr	r3, [pc, #696]	; (8002740 <_dtoa_r+0x318>)
 8002486:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800248a:	ea33 0308 	bics.w	r3, r3, r8
 800248e:	d11b      	bne.n	80024c8 <_dtoa_r+0xa0>
 8002490:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002492:	f242 730f 	movw	r3, #9999	; 0x270f
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	9b02      	ldr	r3, [sp, #8]
 800249a:	b923      	cbnz	r3, 80024a6 <_dtoa_r+0x7e>
 800249c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80024a0:	2800      	cmp	r0, #0
 80024a2:	f000 854b 	beq.w	8002f3c <_dtoa_r+0xb14>
 80024a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80024a8:	b953      	cbnz	r3, 80024c0 <_dtoa_r+0x98>
 80024aa:	4ba6      	ldr	r3, [pc, #664]	; (8002744 <_dtoa_r+0x31c>)
 80024ac:	e021      	b.n	80024f2 <_dtoa_r+0xca>
 80024ae:	4ba6      	ldr	r3, [pc, #664]	; (8002748 <_dtoa_r+0x320>)
 80024b0:	9306      	str	r3, [sp, #24]
 80024b2:	3308      	adds	r3, #8
 80024b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	9806      	ldr	r0, [sp, #24]
 80024ba:	b015      	add	sp, #84	; 0x54
 80024bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024c0:	4ba0      	ldr	r3, [pc, #640]	; (8002744 <_dtoa_r+0x31c>)
 80024c2:	9306      	str	r3, [sp, #24]
 80024c4:	3303      	adds	r3, #3
 80024c6:	e7f5      	b.n	80024b4 <_dtoa_r+0x8c>
 80024c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80024cc:	2200      	movs	r2, #0
 80024ce:	2300      	movs	r3, #0
 80024d0:	4630      	mov	r0, r6
 80024d2:	4639      	mov	r1, r7
 80024d4:	f7fe fab4 	bl	8000a40 <__aeabi_dcmpeq>
 80024d8:	4682      	mov	sl, r0
 80024da:	b160      	cbz	r0, 80024f6 <_dtoa_r+0xce>
 80024dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80024de:	2301      	movs	r3, #1
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8526 	beq.w	8002f36 <_dtoa_r+0xb0e>
 80024ea:	4b98      	ldr	r3, [pc, #608]	; (800274c <_dtoa_r+0x324>)
 80024ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	9306      	str	r3, [sp, #24]
 80024f4:	e7e0      	b.n	80024b8 <_dtoa_r+0x90>
 80024f6:	ab12      	add	r3, sp, #72	; 0x48
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	ab13      	add	r3, sp, #76	; 0x4c
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	4632      	mov	r2, r6
 8002500:	463b      	mov	r3, r7
 8002502:	4620      	mov	r0, r4
 8002504:	f000 fff7 	bl	80034f6 <__d2b>
 8002508:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800250c:	4683      	mov	fp, r0
 800250e:	2d00      	cmp	r5, #0
 8002510:	d07c      	beq.n	800260c <_dtoa_r+0x1e4>
 8002512:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002516:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800251a:	46b0      	mov	r8, r6
 800251c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8002520:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002524:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8002528:	2200      	movs	r2, #0
 800252a:	4b89      	ldr	r3, [pc, #548]	; (8002750 <_dtoa_r+0x328>)
 800252c:	4640      	mov	r0, r8
 800252e:	4649      	mov	r1, r9
 8002530:	f7fd fe66 	bl	8000200 <__aeabi_dsub>
 8002534:	a37c      	add	r3, pc, #496	; (adr r3, 8002728 <_dtoa_r+0x300>)
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	f7fe f819 	bl	8000570 <__aeabi_dmul>
 800253e:	a37c      	add	r3, pc, #496	; (adr r3, 8002730 <_dtoa_r+0x308>)
 8002540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002544:	f7fd fe5e 	bl	8000204 <__adddf3>
 8002548:	4606      	mov	r6, r0
 800254a:	4628      	mov	r0, r5
 800254c:	460f      	mov	r7, r1
 800254e:	f7fd ffa5 	bl	800049c <__aeabi_i2d>
 8002552:	a379      	add	r3, pc, #484	; (adr r3, 8002738 <_dtoa_r+0x310>)
 8002554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002558:	f7fe f80a 	bl	8000570 <__aeabi_dmul>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4630      	mov	r0, r6
 8002562:	4639      	mov	r1, r7
 8002564:	f7fd fe4e 	bl	8000204 <__adddf3>
 8002568:	4606      	mov	r6, r0
 800256a:	460f      	mov	r7, r1
 800256c:	f7fe fab0 	bl	8000ad0 <__aeabi_d2iz>
 8002570:	2200      	movs	r2, #0
 8002572:	4682      	mov	sl, r0
 8002574:	2300      	movs	r3, #0
 8002576:	4630      	mov	r0, r6
 8002578:	4639      	mov	r1, r7
 800257a:	f7fe fa6b 	bl	8000a54 <__aeabi_dcmplt>
 800257e:	b148      	cbz	r0, 8002594 <_dtoa_r+0x16c>
 8002580:	4650      	mov	r0, sl
 8002582:	f7fd ff8b 	bl	800049c <__aeabi_i2d>
 8002586:	4632      	mov	r2, r6
 8002588:	463b      	mov	r3, r7
 800258a:	f7fe fa59 	bl	8000a40 <__aeabi_dcmpeq>
 800258e:	b908      	cbnz	r0, 8002594 <_dtoa_r+0x16c>
 8002590:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002594:	f1ba 0f16 	cmp.w	sl, #22
 8002598:	d859      	bhi.n	800264e <_dtoa_r+0x226>
 800259a:	496e      	ldr	r1, [pc, #440]	; (8002754 <_dtoa_r+0x32c>)
 800259c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80025a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80025a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025a8:	f7fe fa72 	bl	8000a90 <__aeabi_dcmpgt>
 80025ac:	2800      	cmp	r0, #0
 80025ae:	d050      	beq.n	8002652 <_dtoa_r+0x22a>
 80025b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80025b4:	2300      	movs	r3, #0
 80025b6:	930d      	str	r3, [sp, #52]	; 0x34
 80025b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80025ba:	1b5d      	subs	r5, r3, r5
 80025bc:	1e6b      	subs	r3, r5, #1
 80025be:	9307      	str	r3, [sp, #28]
 80025c0:	bf43      	ittte	mi
 80025c2:	2300      	movmi	r3, #0
 80025c4:	f1c5 0901 	rsbmi	r9, r5, #1
 80025c8:	9307      	strmi	r3, [sp, #28]
 80025ca:	f04f 0900 	movpl.w	r9, #0
 80025ce:	f1ba 0f00 	cmp.w	sl, #0
 80025d2:	db40      	blt.n	8002656 <_dtoa_r+0x22e>
 80025d4:	9b07      	ldr	r3, [sp, #28]
 80025d6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80025da:	4453      	add	r3, sl
 80025dc:	9307      	str	r3, [sp, #28]
 80025de:	2300      	movs	r3, #0
 80025e0:	9308      	str	r3, [sp, #32]
 80025e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80025e4:	2b09      	cmp	r3, #9
 80025e6:	f200 808e 	bhi.w	8002706 <_dtoa_r+0x2de>
 80025ea:	2b05      	cmp	r3, #5
 80025ec:	bfc4      	itt	gt
 80025ee:	3b04      	subgt	r3, #4
 80025f0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80025f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80025f4:	f1a3 0302 	sub.w	r3, r3, #2
 80025f8:	bfcc      	ite	gt
 80025fa:	2500      	movgt	r5, #0
 80025fc:	2501      	movle	r5, #1
 80025fe:	2b03      	cmp	r3, #3
 8002600:	f200 808d 	bhi.w	800271e <_dtoa_r+0x2f6>
 8002604:	e8df f003 	tbb	[pc, r3]
 8002608:	6f2f7d7b 	.word	0x6f2f7d7b
 800260c:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8002610:	441d      	add	r5, r3
 8002612:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8002616:	2820      	cmp	r0, #32
 8002618:	dd13      	ble.n	8002642 <_dtoa_r+0x21a>
 800261a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800261e:	9b02      	ldr	r3, [sp, #8]
 8002620:	fa08 f800 	lsl.w	r8, r8, r0
 8002624:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002628:	fa23 f000 	lsr.w	r0, r3, r0
 800262c:	ea48 0000 	orr.w	r0, r8, r0
 8002630:	f7fd ff24 	bl	800047c <__aeabi_ui2d>
 8002634:	2301      	movs	r3, #1
 8002636:	4680      	mov	r8, r0
 8002638:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800263c:	3d01      	subs	r5, #1
 800263e:	9310      	str	r3, [sp, #64]	; 0x40
 8002640:	e772      	b.n	8002528 <_dtoa_r+0x100>
 8002642:	9b02      	ldr	r3, [sp, #8]
 8002644:	f1c0 0020 	rsb	r0, r0, #32
 8002648:	fa03 f000 	lsl.w	r0, r3, r0
 800264c:	e7f0      	b.n	8002630 <_dtoa_r+0x208>
 800264e:	2301      	movs	r3, #1
 8002650:	e7b1      	b.n	80025b6 <_dtoa_r+0x18e>
 8002652:	900d      	str	r0, [sp, #52]	; 0x34
 8002654:	e7b0      	b.n	80025b8 <_dtoa_r+0x190>
 8002656:	f1ca 0300 	rsb	r3, sl, #0
 800265a:	9308      	str	r3, [sp, #32]
 800265c:	2300      	movs	r3, #0
 800265e:	eba9 090a 	sub.w	r9, r9, sl
 8002662:	930c      	str	r3, [sp, #48]	; 0x30
 8002664:	e7bd      	b.n	80025e2 <_dtoa_r+0x1ba>
 8002666:	2301      	movs	r3, #1
 8002668:	9309      	str	r3, [sp, #36]	; 0x24
 800266a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800266c:	2b00      	cmp	r3, #0
 800266e:	dd75      	ble.n	800275c <_dtoa_r+0x334>
 8002670:	9304      	str	r3, [sp, #16]
 8002672:	4698      	mov	r8, r3
 8002674:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002676:	2200      	movs	r2, #0
 8002678:	6072      	str	r2, [r6, #4]
 800267a:	2204      	movs	r2, #4
 800267c:	f102 0014 	add.w	r0, r2, #20
 8002680:	4298      	cmp	r0, r3
 8002682:	6871      	ldr	r1, [r6, #4]
 8002684:	d96f      	bls.n	8002766 <_dtoa_r+0x33e>
 8002686:	4620      	mov	r0, r4
 8002688:	f000 fca9 	bl	8002fde <_Balloc>
 800268c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800268e:	6030      	str	r0, [r6, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	9306      	str	r3, [sp, #24]
 8002694:	f1b8 0f0e 	cmp.w	r8, #14
 8002698:	f200 80ee 	bhi.w	8002878 <_dtoa_r+0x450>
 800269c:	2d00      	cmp	r5, #0
 800269e:	f000 80eb 	beq.w	8002878 <_dtoa_r+0x450>
 80026a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80026a6:	f1ba 0f00 	cmp.w	sl, #0
 80026aa:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80026ae:	dd78      	ble.n	80027a2 <_dtoa_r+0x37a>
 80026b0:	4a28      	ldr	r2, [pc, #160]	; (8002754 <_dtoa_r+0x32c>)
 80026b2:	f00a 030f 	and.w	r3, sl, #15
 80026b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	ea4f 162a 	mov.w	r6, sl, asr #4
 80026c2:	06f0      	lsls	r0, r6, #27
 80026c4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80026c8:	d569      	bpl.n	800279e <_dtoa_r+0x376>
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <_dtoa_r+0x330>)
 80026cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80026d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80026d4:	f7fe f876 	bl	80007c4 <__aeabi_ddiv>
 80026d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026dc:	f006 060f 	and.w	r6, r6, #15
 80026e0:	2503      	movs	r5, #3
 80026e2:	4f1d      	ldr	r7, [pc, #116]	; (8002758 <_dtoa_r+0x330>)
 80026e4:	e050      	b.n	8002788 <_dtoa_r+0x360>
 80026e6:	2301      	movs	r3, #1
 80026e8:	9309      	str	r3, [sp, #36]	; 0x24
 80026ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80026ec:	4453      	add	r3, sl
 80026ee:	f103 0801 	add.w	r8, r3, #1
 80026f2:	9304      	str	r3, [sp, #16]
 80026f4:	4643      	mov	r3, r8
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	bfb8      	it	lt
 80026fa:	2301      	movlt	r3, #1
 80026fc:	e7ba      	b.n	8002674 <_dtoa_r+0x24c>
 80026fe:	2300      	movs	r3, #0
 8002700:	e7b2      	b.n	8002668 <_dtoa_r+0x240>
 8002702:	2300      	movs	r3, #0
 8002704:	e7f0      	b.n	80026e8 <_dtoa_r+0x2c0>
 8002706:	2501      	movs	r5, #1
 8002708:	2300      	movs	r3, #0
 800270a:	931e      	str	r3, [sp, #120]	; 0x78
 800270c:	9509      	str	r5, [sp, #36]	; 0x24
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
 8002712:	9304      	str	r3, [sp, #16]
 8002714:	4698      	mov	r8, r3
 8002716:	2200      	movs	r2, #0
 8002718:	2312      	movs	r3, #18
 800271a:	921f      	str	r2, [sp, #124]	; 0x7c
 800271c:	e7aa      	b.n	8002674 <_dtoa_r+0x24c>
 800271e:	2301      	movs	r3, #1
 8002720:	9309      	str	r3, [sp, #36]	; 0x24
 8002722:	e7f4      	b.n	800270e <_dtoa_r+0x2e6>
 8002724:	f3af 8000 	nop.w
 8002728:	636f4361 	.word	0x636f4361
 800272c:	3fd287a7 	.word	0x3fd287a7
 8002730:	8b60c8b3 	.word	0x8b60c8b3
 8002734:	3fc68a28 	.word	0x3fc68a28
 8002738:	509f79fb 	.word	0x509f79fb
 800273c:	3fd34413 	.word	0x3fd34413
 8002740:	7ff00000 	.word	0x7ff00000
 8002744:	0800376b 	.word	0x0800376b
 8002748:	08003762 	.word	0x08003762
 800274c:	08003761 	.word	0x08003761
 8002750:	3ff80000 	.word	0x3ff80000
 8002754:	08003798 	.word	0x08003798
 8002758:	08003770 	.word	0x08003770
 800275c:	2301      	movs	r3, #1
 800275e:	9304      	str	r3, [sp, #16]
 8002760:	4698      	mov	r8, r3
 8002762:	461a      	mov	r2, r3
 8002764:	e7d9      	b.n	800271a <_dtoa_r+0x2f2>
 8002766:	3101      	adds	r1, #1
 8002768:	6071      	str	r1, [r6, #4]
 800276a:	0052      	lsls	r2, r2, #1
 800276c:	e786      	b.n	800267c <_dtoa_r+0x254>
 800276e:	07f1      	lsls	r1, r6, #31
 8002770:	d508      	bpl.n	8002784 <_dtoa_r+0x35c>
 8002772:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800277a:	f7fd fef9 	bl	8000570 <__aeabi_dmul>
 800277e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002782:	3501      	adds	r5, #1
 8002784:	1076      	asrs	r6, r6, #1
 8002786:	3708      	adds	r7, #8
 8002788:	2e00      	cmp	r6, #0
 800278a:	d1f0      	bne.n	800276e <_dtoa_r+0x346>
 800278c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002794:	f7fe f816 	bl	80007c4 <__aeabi_ddiv>
 8002798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800279c:	e01b      	b.n	80027d6 <_dtoa_r+0x3ae>
 800279e:	2502      	movs	r5, #2
 80027a0:	e79f      	b.n	80026e2 <_dtoa_r+0x2ba>
 80027a2:	f000 80a4 	beq.w	80028ee <_dtoa_r+0x4c6>
 80027a6:	f1ca 0600 	rsb	r6, sl, #0
 80027aa:	4ba2      	ldr	r3, [pc, #648]	; (8002a34 <_dtoa_r+0x60c>)
 80027ac:	4fa2      	ldr	r7, [pc, #648]	; (8002a38 <_dtoa_r+0x610>)
 80027ae:	f006 020f 	and.w	r2, r6, #15
 80027b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80027be:	f7fd fed7 	bl	8000570 <__aeabi_dmul>
 80027c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80027c6:	1136      	asrs	r6, r6, #4
 80027c8:	2300      	movs	r3, #0
 80027ca:	2502      	movs	r5, #2
 80027cc:	2e00      	cmp	r6, #0
 80027ce:	f040 8083 	bne.w	80028d8 <_dtoa_r+0x4b0>
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e0      	bne.n	8002798 <_dtoa_r+0x370>
 80027d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 808a 	beq.w	80028f2 <_dtoa_r+0x4ca>
 80027de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80027e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80027e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80027ea:	2200      	movs	r2, #0
 80027ec:	4b93      	ldr	r3, [pc, #588]	; (8002a3c <_dtoa_r+0x614>)
 80027ee:	f7fe f931 	bl	8000a54 <__aeabi_dcmplt>
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d07d      	beq.n	80028f2 <_dtoa_r+0x4ca>
 80027f6:	f1b8 0f00 	cmp.w	r8, #0
 80027fa:	d07a      	beq.n	80028f2 <_dtoa_r+0x4ca>
 80027fc:	9b04      	ldr	r3, [sp, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	dd36      	ble.n	8002870 <_dtoa_r+0x448>
 8002802:	2200      	movs	r2, #0
 8002804:	4b8e      	ldr	r3, [pc, #568]	; (8002a40 <_dtoa_r+0x618>)
 8002806:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800280a:	f7fd feb1 	bl	8000570 <__aeabi_dmul>
 800280e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002812:	9e04      	ldr	r6, [sp, #16]
 8002814:	f10a 37ff 	add.w	r7, sl, #4294967295
 8002818:	3501      	adds	r5, #1
 800281a:	4628      	mov	r0, r5
 800281c:	f7fd fe3e 	bl	800049c <__aeabi_i2d>
 8002820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002824:	f7fd fea4 	bl	8000570 <__aeabi_dmul>
 8002828:	2200      	movs	r2, #0
 800282a:	4b86      	ldr	r3, [pc, #536]	; (8002a44 <_dtoa_r+0x61c>)
 800282c:	f7fd fcea 	bl	8000204 <__adddf3>
 8002830:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8002834:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002838:	950b      	str	r5, [sp, #44]	; 0x2c
 800283a:	2e00      	cmp	r6, #0
 800283c:	d15c      	bne.n	80028f8 <_dtoa_r+0x4d0>
 800283e:	2200      	movs	r2, #0
 8002840:	4b81      	ldr	r3, [pc, #516]	; (8002a48 <_dtoa_r+0x620>)
 8002842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002846:	f7fd fcdb 	bl	8000200 <__aeabi_dsub>
 800284a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800284c:	462b      	mov	r3, r5
 800284e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002852:	f7fe f91d 	bl	8000a90 <__aeabi_dcmpgt>
 8002856:	2800      	cmp	r0, #0
 8002858:	f040 8284 	bne.w	8002d64 <_dtoa_r+0x93c>
 800285c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800285e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002866:	f7fe f8f5 	bl	8000a54 <__aeabi_dcmplt>
 800286a:	2800      	cmp	r0, #0
 800286c:	f040 8278 	bne.w	8002d60 <_dtoa_r+0x938>
 8002870:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002874:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002878:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800287a:	2b00      	cmp	r3, #0
 800287c:	f2c0 814e 	blt.w	8002b1c <_dtoa_r+0x6f4>
 8002880:	f1ba 0f0e 	cmp.w	sl, #14
 8002884:	f300 814a 	bgt.w	8002b1c <_dtoa_r+0x6f4>
 8002888:	4b6a      	ldr	r3, [pc, #424]	; (8002a34 <_dtoa_r+0x60c>)
 800288a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002896:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002898:	2b00      	cmp	r3, #0
 800289a:	f280 80d9 	bge.w	8002a50 <_dtoa_r+0x628>
 800289e:	f1b8 0f00 	cmp.w	r8, #0
 80028a2:	f300 80d5 	bgt.w	8002a50 <_dtoa_r+0x628>
 80028a6:	f040 825a 	bne.w	8002d5e <_dtoa_r+0x936>
 80028aa:	2200      	movs	r2, #0
 80028ac:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <_dtoa_r+0x620>)
 80028ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80028b2:	f7fd fe5d 	bl	8000570 <__aeabi_dmul>
 80028b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80028ba:	f7fe f8df 	bl	8000a7c <__aeabi_dcmpge>
 80028be:	4646      	mov	r6, r8
 80028c0:	4647      	mov	r7, r8
 80028c2:	2800      	cmp	r0, #0
 80028c4:	f040 8230 	bne.w	8002d28 <_dtoa_r+0x900>
 80028c8:	9b06      	ldr	r3, [sp, #24]
 80028ca:	9a06      	ldr	r2, [sp, #24]
 80028cc:	1c5d      	adds	r5, r3, #1
 80028ce:	2331      	movs	r3, #49	; 0x31
 80028d0:	7013      	strb	r3, [r2, #0]
 80028d2:	f10a 0a01 	add.w	sl, sl, #1
 80028d6:	e22b      	b.n	8002d30 <_dtoa_r+0x908>
 80028d8:	07f2      	lsls	r2, r6, #31
 80028da:	d505      	bpl.n	80028e8 <_dtoa_r+0x4c0>
 80028dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028e0:	f7fd fe46 	bl	8000570 <__aeabi_dmul>
 80028e4:	3501      	adds	r5, #1
 80028e6:	2301      	movs	r3, #1
 80028e8:	1076      	asrs	r6, r6, #1
 80028ea:	3708      	adds	r7, #8
 80028ec:	e76e      	b.n	80027cc <_dtoa_r+0x3a4>
 80028ee:	2502      	movs	r5, #2
 80028f0:	e771      	b.n	80027d6 <_dtoa_r+0x3ae>
 80028f2:	4657      	mov	r7, sl
 80028f4:	4646      	mov	r6, r8
 80028f6:	e790      	b.n	800281a <_dtoa_r+0x3f2>
 80028f8:	4b4e      	ldr	r3, [pc, #312]	; (8002a34 <_dtoa_r+0x60c>)
 80028fa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80028fe:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8002902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002904:	2b00      	cmp	r3, #0
 8002906:	d048      	beq.n	800299a <_dtoa_r+0x572>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	2000      	movs	r0, #0
 800290e:	494f      	ldr	r1, [pc, #316]	; (8002a4c <_dtoa_r+0x624>)
 8002910:	f7fd ff58 	bl	80007c4 <__aeabi_ddiv>
 8002914:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002918:	f7fd fc72 	bl	8000200 <__aeabi_dsub>
 800291c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002920:	9d06      	ldr	r5, [sp, #24]
 8002922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002926:	f7fe f8d3 	bl	8000ad0 <__aeabi_d2iz>
 800292a:	9011      	str	r0, [sp, #68]	; 0x44
 800292c:	f7fd fdb6 	bl	800049c <__aeabi_i2d>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002938:	f7fd fc62 	bl	8000200 <__aeabi_dsub>
 800293c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800293e:	3330      	adds	r3, #48	; 0x30
 8002940:	f805 3b01 	strb.w	r3, [r5], #1
 8002944:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800294c:	f7fe f882 	bl	8000a54 <__aeabi_dcmplt>
 8002950:	2800      	cmp	r0, #0
 8002952:	d164      	bne.n	8002a1e <_dtoa_r+0x5f6>
 8002954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002958:	2000      	movs	r0, #0
 800295a:	4938      	ldr	r1, [pc, #224]	; (8002a3c <_dtoa_r+0x614>)
 800295c:	f7fd fc50 	bl	8000200 <__aeabi_dsub>
 8002960:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002964:	f7fe f876 	bl	8000a54 <__aeabi_dcmplt>
 8002968:	2800      	cmp	r0, #0
 800296a:	f040 80b7 	bne.w	8002adc <_dtoa_r+0x6b4>
 800296e:	9b06      	ldr	r3, [sp, #24]
 8002970:	1aeb      	subs	r3, r5, r3
 8002972:	429e      	cmp	r6, r3
 8002974:	f77f af7c 	ble.w	8002870 <_dtoa_r+0x448>
 8002978:	2200      	movs	r2, #0
 800297a:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <_dtoa_r+0x618>)
 800297c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002980:	f7fd fdf6 	bl	8000570 <__aeabi_dmul>
 8002984:	2200      	movs	r2, #0
 8002986:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800298a:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <_dtoa_r+0x618>)
 800298c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002990:	f7fd fdee 	bl	8000570 <__aeabi_dmul>
 8002994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002998:	e7c3      	b.n	8002922 <_dtoa_r+0x4fa>
 800299a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800299e:	f7fd fde7 	bl	8000570 <__aeabi_dmul>
 80029a2:	9b06      	ldr	r3, [sp, #24]
 80029a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80029a8:	199d      	adds	r5, r3, r6
 80029aa:	461e      	mov	r6, r3
 80029ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029b0:	f7fe f88e 	bl	8000ad0 <__aeabi_d2iz>
 80029b4:	9011      	str	r0, [sp, #68]	; 0x44
 80029b6:	f7fd fd71 	bl	800049c <__aeabi_i2d>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029c2:	f7fd fc1d 	bl	8000200 <__aeabi_dsub>
 80029c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80029c8:	3330      	adds	r3, #48	; 0x30
 80029ca:	f806 3b01 	strb.w	r3, [r6], #1
 80029ce:	42ae      	cmp	r6, r5
 80029d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	d125      	bne.n	8002a26 <_dtoa_r+0x5fe>
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <_dtoa_r+0x624>)
 80029dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80029e0:	f7fd fc10 	bl	8000204 <__adddf3>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029ec:	f7fe f850 	bl	8000a90 <__aeabi_dcmpgt>
 80029f0:	2800      	cmp	r0, #0
 80029f2:	d173      	bne.n	8002adc <_dtoa_r+0x6b4>
 80029f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80029f8:	2000      	movs	r0, #0
 80029fa:	4914      	ldr	r1, [pc, #80]	; (8002a4c <_dtoa_r+0x624>)
 80029fc:	f7fd fc00 	bl	8000200 <__aeabi_dsub>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a08:	f7fe f824 	bl	8000a54 <__aeabi_dcmplt>
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	f43f af2f 	beq.w	8002870 <_dtoa_r+0x448>
 8002a12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002a16:	2b30      	cmp	r3, #48	; 0x30
 8002a18:	f105 32ff 	add.w	r2, r5, #4294967295
 8002a1c:	d001      	beq.n	8002a22 <_dtoa_r+0x5fa>
 8002a1e:	46ba      	mov	sl, r7
 8002a20:	e04b      	b.n	8002aba <_dtoa_r+0x692>
 8002a22:	4615      	mov	r5, r2
 8002a24:	e7f5      	b.n	8002a12 <_dtoa_r+0x5ea>
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <_dtoa_r+0x618>)
 8002a28:	f7fd fda2 	bl	8000570 <__aeabi_dmul>
 8002a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a30:	e7bc      	b.n	80029ac <_dtoa_r+0x584>
 8002a32:	bf00      	nop
 8002a34:	08003798 	.word	0x08003798
 8002a38:	08003770 	.word	0x08003770
 8002a3c:	3ff00000 	.word	0x3ff00000
 8002a40:	40240000 	.word	0x40240000
 8002a44:	401c0000 	.word	0x401c0000
 8002a48:	40140000 	.word	0x40140000
 8002a4c:	3fe00000 	.word	0x3fe00000
 8002a50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002a54:	9d06      	ldr	r5, [sp, #24]
 8002a56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002a5a:	4630      	mov	r0, r6
 8002a5c:	4639      	mov	r1, r7
 8002a5e:	f7fd feb1 	bl	80007c4 <__aeabi_ddiv>
 8002a62:	f7fe f835 	bl	8000ad0 <__aeabi_d2iz>
 8002a66:	4681      	mov	r9, r0
 8002a68:	f7fd fd18 	bl	800049c <__aeabi_i2d>
 8002a6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002a70:	f7fd fd7e 	bl	8000570 <__aeabi_dmul>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4630      	mov	r0, r6
 8002a7a:	4639      	mov	r1, r7
 8002a7c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8002a80:	f7fd fbbe 	bl	8000200 <__aeabi_dsub>
 8002a84:	f805 6b01 	strb.w	r6, [r5], #1
 8002a88:	9e06      	ldr	r6, [sp, #24]
 8002a8a:	1bae      	subs	r6, r5, r6
 8002a8c:	45b0      	cmp	r8, r6
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	d136      	bne.n	8002b02 <_dtoa_r+0x6da>
 8002a94:	f7fd fbb6 	bl	8000204 <__adddf3>
 8002a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002a9c:	4606      	mov	r6, r0
 8002a9e:	460f      	mov	r7, r1
 8002aa0:	f7fd fff6 	bl	8000a90 <__aeabi_dcmpgt>
 8002aa4:	b9c8      	cbnz	r0, 8002ada <_dtoa_r+0x6b2>
 8002aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002aaa:	4630      	mov	r0, r6
 8002aac:	4639      	mov	r1, r7
 8002aae:	f7fd ffc7 	bl	8000a40 <__aeabi_dcmpeq>
 8002ab2:	b110      	cbz	r0, 8002aba <_dtoa_r+0x692>
 8002ab4:	f019 0f01 	tst.w	r9, #1
 8002ab8:	d10f      	bne.n	8002ada <_dtoa_r+0x6b2>
 8002aba:	4659      	mov	r1, fp
 8002abc:	4620      	mov	r0, r4
 8002abe:	f000 fac2 	bl	8003046 <_Bfree>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002ac6:	702b      	strb	r3, [r5, #0]
 8002ac8:	f10a 0301 	add.w	r3, sl, #1
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f43f acf1 	beq.w	80024b8 <_dtoa_r+0x90>
 8002ad6:	601d      	str	r5, [r3, #0]
 8002ad8:	e4ee      	b.n	80024b8 <_dtoa_r+0x90>
 8002ada:	4657      	mov	r7, sl
 8002adc:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8002ae0:	2a39      	cmp	r2, #57	; 0x39
 8002ae2:	f105 33ff 	add.w	r3, r5, #4294967295
 8002ae6:	d106      	bne.n	8002af6 <_dtoa_r+0x6ce>
 8002ae8:	9a06      	ldr	r2, [sp, #24]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d107      	bne.n	8002afe <_dtoa_r+0x6d6>
 8002aee:	2330      	movs	r3, #48	; 0x30
 8002af0:	7013      	strb	r3, [r2, #0]
 8002af2:	3701      	adds	r7, #1
 8002af4:	4613      	mov	r3, r2
 8002af6:	781a      	ldrb	r2, [r3, #0]
 8002af8:	3201      	adds	r2, #1
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e78f      	b.n	8002a1e <_dtoa_r+0x5f6>
 8002afe:	461d      	mov	r5, r3
 8002b00:	e7ec      	b.n	8002adc <_dtoa_r+0x6b4>
 8002b02:	2200      	movs	r2, #0
 8002b04:	4b99      	ldr	r3, [pc, #612]	; (8002d6c <_dtoa_r+0x944>)
 8002b06:	f7fd fd33 	bl	8000570 <__aeabi_dmul>
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	4606      	mov	r6, r0
 8002b10:	460f      	mov	r7, r1
 8002b12:	f7fd ff95 	bl	8000a40 <__aeabi_dcmpeq>
 8002b16:	2800      	cmp	r0, #0
 8002b18:	d09d      	beq.n	8002a56 <_dtoa_r+0x62e>
 8002b1a:	e7ce      	b.n	8002aba <_dtoa_r+0x692>
 8002b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b1e:	2a00      	cmp	r2, #0
 8002b20:	f000 8088 	beq.w	8002c34 <_dtoa_r+0x80c>
 8002b24:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002b26:	2a01      	cmp	r2, #1
 8002b28:	dc6d      	bgt.n	8002c06 <_dtoa_r+0x7de>
 8002b2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002b2c:	2a00      	cmp	r2, #0
 8002b2e:	d066      	beq.n	8002bfe <_dtoa_r+0x7d6>
 8002b30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002b34:	9e08      	ldr	r6, [sp, #32]
 8002b36:	464d      	mov	r5, r9
 8002b38:	9a07      	ldr	r2, [sp, #28]
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	441a      	add	r2, r3
 8002b3e:	4620      	mov	r0, r4
 8002b40:	4499      	add	r9, r3
 8002b42:	9207      	str	r2, [sp, #28]
 8002b44:	f000 fb1f 	bl	8003186 <__i2b>
 8002b48:	4607      	mov	r7, r0
 8002b4a:	2d00      	cmp	r5, #0
 8002b4c:	dd0b      	ble.n	8002b66 <_dtoa_r+0x73e>
 8002b4e:	9b07      	ldr	r3, [sp, #28]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	dd08      	ble.n	8002b66 <_dtoa_r+0x73e>
 8002b54:	42ab      	cmp	r3, r5
 8002b56:	9a07      	ldr	r2, [sp, #28]
 8002b58:	bfa8      	it	ge
 8002b5a:	462b      	movge	r3, r5
 8002b5c:	eba9 0903 	sub.w	r9, r9, r3
 8002b60:	1aed      	subs	r5, r5, r3
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	9307      	str	r3, [sp, #28]
 8002b66:	9b08      	ldr	r3, [sp, #32]
 8002b68:	b1eb      	cbz	r3, 8002ba6 <_dtoa_r+0x77e>
 8002b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d065      	beq.n	8002c3c <_dtoa_r+0x814>
 8002b70:	b18e      	cbz	r6, 8002b96 <_dtoa_r+0x76e>
 8002b72:	4639      	mov	r1, r7
 8002b74:	4632      	mov	r2, r6
 8002b76:	4620      	mov	r0, r4
 8002b78:	f000 fba4 	bl	80032c4 <__pow5mult>
 8002b7c:	465a      	mov	r2, fp
 8002b7e:	4601      	mov	r1, r0
 8002b80:	4607      	mov	r7, r0
 8002b82:	4620      	mov	r0, r4
 8002b84:	f000 fb08 	bl	8003198 <__multiply>
 8002b88:	4659      	mov	r1, fp
 8002b8a:	900a      	str	r0, [sp, #40]	; 0x28
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f000 fa5a 	bl	8003046 <_Bfree>
 8002b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b94:	469b      	mov	fp, r3
 8002b96:	9b08      	ldr	r3, [sp, #32]
 8002b98:	1b9a      	subs	r2, r3, r6
 8002b9a:	d004      	beq.n	8002ba6 <_dtoa_r+0x77e>
 8002b9c:	4659      	mov	r1, fp
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f000 fb90 	bl	80032c4 <__pow5mult>
 8002ba4:	4683      	mov	fp, r0
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f000 faec 	bl	8003186 <__i2b>
 8002bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002bb0:	4606      	mov	r6, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 81c9 	beq.w	8002f4a <_dtoa_r+0xb22>
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4601      	mov	r1, r0
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f000 fb81 	bl	80032c4 <__pow5mult>
 8002bc2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	4606      	mov	r6, r0
 8002bc8:	dc3e      	bgt.n	8002c48 <_dtoa_r+0x820>
 8002bca:	9b02      	ldr	r3, [sp, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d137      	bne.n	8002c40 <_dtoa_r+0x818>
 8002bd0:	9b03      	ldr	r3, [sp, #12]
 8002bd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d134      	bne.n	8002c44 <_dtoa_r+0x81c>
 8002bda:	9b03      	ldr	r3, [sp, #12]
 8002bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002be0:	0d1b      	lsrs	r3, r3, #20
 8002be2:	051b      	lsls	r3, r3, #20
 8002be4:	b12b      	cbz	r3, 8002bf2 <_dtoa_r+0x7ca>
 8002be6:	9b07      	ldr	r3, [sp, #28]
 8002be8:	3301      	adds	r3, #1
 8002bea:	9307      	str	r3, [sp, #28]
 8002bec:	f109 0901 	add.w	r9, r9, #1
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	9308      	str	r3, [sp, #32]
 8002bf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d128      	bne.n	8002c4c <_dtoa_r+0x824>
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	e02e      	b.n	8002c5c <_dtoa_r+0x834>
 8002bfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002c00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002c04:	e796      	b.n	8002b34 <_dtoa_r+0x70c>
 8002c06:	9b08      	ldr	r3, [sp, #32]
 8002c08:	f108 36ff 	add.w	r6, r8, #4294967295
 8002c0c:	42b3      	cmp	r3, r6
 8002c0e:	bfbf      	itttt	lt
 8002c10:	9b08      	ldrlt	r3, [sp, #32]
 8002c12:	9608      	strlt	r6, [sp, #32]
 8002c14:	1af2      	sublt	r2, r6, r3
 8002c16:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8002c18:	bfb7      	itett	lt
 8002c1a:	189b      	addlt	r3, r3, r2
 8002c1c:	1b9e      	subge	r6, r3, r6
 8002c1e:	930c      	strlt	r3, [sp, #48]	; 0x30
 8002c20:	2600      	movlt	r6, #0
 8002c22:	f1b8 0f00 	cmp.w	r8, #0
 8002c26:	bfb9      	ittee	lt
 8002c28:	eba9 0508 	sublt.w	r5, r9, r8
 8002c2c:	2300      	movlt	r3, #0
 8002c2e:	464d      	movge	r5, r9
 8002c30:	4643      	movge	r3, r8
 8002c32:	e781      	b.n	8002b38 <_dtoa_r+0x710>
 8002c34:	9e08      	ldr	r6, [sp, #32]
 8002c36:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002c38:	464d      	mov	r5, r9
 8002c3a:	e786      	b.n	8002b4a <_dtoa_r+0x722>
 8002c3c:	9a08      	ldr	r2, [sp, #32]
 8002c3e:	e7ad      	b.n	8002b9c <_dtoa_r+0x774>
 8002c40:	2300      	movs	r3, #0
 8002c42:	e7d6      	b.n	8002bf2 <_dtoa_r+0x7ca>
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	e7d4      	b.n	8002bf2 <_dtoa_r+0x7ca>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	9308      	str	r3, [sp, #32]
 8002c4c:	6933      	ldr	r3, [r6, #16]
 8002c4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002c52:	6918      	ldr	r0, [r3, #16]
 8002c54:	f000 fa49 	bl	80030ea <__hi0bits>
 8002c58:	f1c0 0020 	rsb	r0, r0, #32
 8002c5c:	9b07      	ldr	r3, [sp, #28]
 8002c5e:	4418      	add	r0, r3
 8002c60:	f010 001f 	ands.w	r0, r0, #31
 8002c64:	d047      	beq.n	8002cf6 <_dtoa_r+0x8ce>
 8002c66:	f1c0 0320 	rsb	r3, r0, #32
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	dd3b      	ble.n	8002ce6 <_dtoa_r+0x8be>
 8002c6e:	9b07      	ldr	r3, [sp, #28]
 8002c70:	f1c0 001c 	rsb	r0, r0, #28
 8002c74:	4481      	add	r9, r0
 8002c76:	4405      	add	r5, r0
 8002c78:	4403      	add	r3, r0
 8002c7a:	9307      	str	r3, [sp, #28]
 8002c7c:	f1b9 0f00 	cmp.w	r9, #0
 8002c80:	dd05      	ble.n	8002c8e <_dtoa_r+0x866>
 8002c82:	4659      	mov	r1, fp
 8002c84:	464a      	mov	r2, r9
 8002c86:	4620      	mov	r0, r4
 8002c88:	f000 fb6a 	bl	8003360 <__lshift>
 8002c8c:	4683      	mov	fp, r0
 8002c8e:	9b07      	ldr	r3, [sp, #28]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	dd05      	ble.n	8002ca0 <_dtoa_r+0x878>
 8002c94:	4631      	mov	r1, r6
 8002c96:	461a      	mov	r2, r3
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f000 fb61 	bl	8003360 <__lshift>
 8002c9e:	4606      	mov	r6, r0
 8002ca0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ca2:	b353      	cbz	r3, 8002cfa <_dtoa_r+0x8d2>
 8002ca4:	4631      	mov	r1, r6
 8002ca6:	4658      	mov	r0, fp
 8002ca8:	f000 fbae 	bl	8003408 <__mcmp>
 8002cac:	2800      	cmp	r0, #0
 8002cae:	da24      	bge.n	8002cfa <_dtoa_r+0x8d2>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	4659      	mov	r1, fp
 8002cb4:	220a      	movs	r2, #10
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f000 f9dc 	bl	8003074 <__multadd>
 8002cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002cc2:	4683      	mov	fp, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 8147 	beq.w	8002f58 <_dtoa_r+0xb30>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	4639      	mov	r1, r7
 8002cce:	220a      	movs	r2, #10
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f000 f9cf 	bl	8003074 <__multadd>
 8002cd6:	9b04      	ldr	r3, [sp, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	4607      	mov	r7, r0
 8002cdc:	dc4e      	bgt.n	8002d7c <_dtoa_r+0x954>
 8002cde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	dd4b      	ble.n	8002d7c <_dtoa_r+0x954>
 8002ce4:	e011      	b.n	8002d0a <_dtoa_r+0x8e2>
 8002ce6:	d0c9      	beq.n	8002c7c <_dtoa_r+0x854>
 8002ce8:	9a07      	ldr	r2, [sp, #28]
 8002cea:	331c      	adds	r3, #28
 8002cec:	441a      	add	r2, r3
 8002cee:	4499      	add	r9, r3
 8002cf0:	441d      	add	r5, r3
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	e7c1      	b.n	8002c7a <_dtoa_r+0x852>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	e7f6      	b.n	8002ce8 <_dtoa_r+0x8c0>
 8002cfa:	f1b8 0f00 	cmp.w	r8, #0
 8002cfe:	dc37      	bgt.n	8002d70 <_dtoa_r+0x948>
 8002d00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	dd34      	ble.n	8002d70 <_dtoa_r+0x948>
 8002d06:	f8cd 8010 	str.w	r8, [sp, #16]
 8002d0a:	9b04      	ldr	r3, [sp, #16]
 8002d0c:	b963      	cbnz	r3, 8002d28 <_dtoa_r+0x900>
 8002d0e:	4631      	mov	r1, r6
 8002d10:	2205      	movs	r2, #5
 8002d12:	4620      	mov	r0, r4
 8002d14:	f000 f9ae 	bl	8003074 <__multadd>
 8002d18:	4601      	mov	r1, r0
 8002d1a:	4606      	mov	r6, r0
 8002d1c:	4658      	mov	r0, fp
 8002d1e:	f000 fb73 	bl	8003408 <__mcmp>
 8002d22:	2800      	cmp	r0, #0
 8002d24:	f73f add0 	bgt.w	80028c8 <_dtoa_r+0x4a0>
 8002d28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002d2a:	9d06      	ldr	r5, [sp, #24]
 8002d2c:	ea6f 0a03 	mvn.w	sl, r3
 8002d30:	f04f 0900 	mov.w	r9, #0
 8002d34:	4631      	mov	r1, r6
 8002d36:	4620      	mov	r0, r4
 8002d38:	f000 f985 	bl	8003046 <_Bfree>
 8002d3c:	2f00      	cmp	r7, #0
 8002d3e:	f43f aebc 	beq.w	8002aba <_dtoa_r+0x692>
 8002d42:	f1b9 0f00 	cmp.w	r9, #0
 8002d46:	d005      	beq.n	8002d54 <_dtoa_r+0x92c>
 8002d48:	45b9      	cmp	r9, r7
 8002d4a:	d003      	beq.n	8002d54 <_dtoa_r+0x92c>
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f000 f979 	bl	8003046 <_Bfree>
 8002d54:	4639      	mov	r1, r7
 8002d56:	4620      	mov	r0, r4
 8002d58:	f000 f975 	bl	8003046 <_Bfree>
 8002d5c:	e6ad      	b.n	8002aba <_dtoa_r+0x692>
 8002d5e:	2600      	movs	r6, #0
 8002d60:	4637      	mov	r7, r6
 8002d62:	e7e1      	b.n	8002d28 <_dtoa_r+0x900>
 8002d64:	46ba      	mov	sl, r7
 8002d66:	4637      	mov	r7, r6
 8002d68:	e5ae      	b.n	80028c8 <_dtoa_r+0x4a0>
 8002d6a:	bf00      	nop
 8002d6c:	40240000 	.word	0x40240000
 8002d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d72:	f8cd 8010 	str.w	r8, [sp, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 80f5 	beq.w	8002f66 <_dtoa_r+0xb3e>
 8002d7c:	2d00      	cmp	r5, #0
 8002d7e:	dd05      	ble.n	8002d8c <_dtoa_r+0x964>
 8002d80:	4639      	mov	r1, r7
 8002d82:	462a      	mov	r2, r5
 8002d84:	4620      	mov	r0, r4
 8002d86:	f000 faeb 	bl	8003360 <__lshift>
 8002d8a:	4607      	mov	r7, r0
 8002d8c:	9b08      	ldr	r3, [sp, #32]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d04c      	beq.n	8002e2c <_dtoa_r+0xa04>
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4620      	mov	r0, r4
 8002d96:	f000 f922 	bl	8002fde <_Balloc>
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	3202      	adds	r2, #2
 8002d9e:	4605      	mov	r5, r0
 8002da0:	0092      	lsls	r2, r2, #2
 8002da2:	f107 010c 	add.w	r1, r7, #12
 8002da6:	300c      	adds	r0, #12
 8002da8:	f000 f90e 	bl	8002fc8 <memcpy>
 8002dac:	2201      	movs	r2, #1
 8002dae:	4629      	mov	r1, r5
 8002db0:	4620      	mov	r0, r4
 8002db2:	f000 fad5 	bl	8003360 <__lshift>
 8002db6:	9b06      	ldr	r3, [sp, #24]
 8002db8:	9307      	str	r3, [sp, #28]
 8002dba:	9b02      	ldr	r3, [sp, #8]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	46b9      	mov	r9, r7
 8002dc2:	9308      	str	r3, [sp, #32]
 8002dc4:	4607      	mov	r7, r0
 8002dc6:	4631      	mov	r1, r6
 8002dc8:	4658      	mov	r0, fp
 8002dca:	f7ff faa0 	bl	800230e <quorem>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	4605      	mov	r5, r0
 8002dd2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8002dd6:	4658      	mov	r0, fp
 8002dd8:	f000 fb16 	bl	8003408 <__mcmp>
 8002ddc:	463a      	mov	r2, r7
 8002dde:	9002      	str	r0, [sp, #8]
 8002de0:	4631      	mov	r1, r6
 8002de2:	4620      	mov	r0, r4
 8002de4:	f000 fb2a 	bl	800343c <__mdiff>
 8002de8:	68c3      	ldr	r3, [r0, #12]
 8002dea:	4602      	mov	r2, r0
 8002dec:	bb03      	cbnz	r3, 8002e30 <_dtoa_r+0xa08>
 8002dee:	4601      	mov	r1, r0
 8002df0:	9009      	str	r0, [sp, #36]	; 0x24
 8002df2:	4658      	mov	r0, fp
 8002df4:	f000 fb08 	bl	8003408 <__mcmp>
 8002df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4620      	mov	r0, r4
 8002e00:	9309      	str	r3, [sp, #36]	; 0x24
 8002e02:	f000 f920 	bl	8003046 <_Bfree>
 8002e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e08:	b9a3      	cbnz	r3, 8002e34 <_dtoa_r+0xa0c>
 8002e0a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002e0c:	b992      	cbnz	r2, 8002e34 <_dtoa_r+0xa0c>
 8002e0e:	9a08      	ldr	r2, [sp, #32]
 8002e10:	b982      	cbnz	r2, 8002e34 <_dtoa_r+0xa0c>
 8002e12:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002e16:	d029      	beq.n	8002e6c <_dtoa_r+0xa44>
 8002e18:	9b02      	ldr	r3, [sp, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	dd01      	ble.n	8002e22 <_dtoa_r+0x9fa>
 8002e1e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8002e22:	9b07      	ldr	r3, [sp, #28]
 8002e24:	1c5d      	adds	r5, r3, #1
 8002e26:	f883 8000 	strb.w	r8, [r3]
 8002e2a:	e783      	b.n	8002d34 <_dtoa_r+0x90c>
 8002e2c:	4638      	mov	r0, r7
 8002e2e:	e7c2      	b.n	8002db6 <_dtoa_r+0x98e>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e7e3      	b.n	8002dfc <_dtoa_r+0x9d4>
 8002e34:	9a02      	ldr	r2, [sp, #8]
 8002e36:	2a00      	cmp	r2, #0
 8002e38:	db04      	blt.n	8002e44 <_dtoa_r+0xa1c>
 8002e3a:	d124      	bne.n	8002e86 <_dtoa_r+0xa5e>
 8002e3c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002e3e:	bb12      	cbnz	r2, 8002e86 <_dtoa_r+0xa5e>
 8002e40:	9a08      	ldr	r2, [sp, #32]
 8002e42:	bb02      	cbnz	r2, 8002e86 <_dtoa_r+0xa5e>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	ddec      	ble.n	8002e22 <_dtoa_r+0x9fa>
 8002e48:	4659      	mov	r1, fp
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f000 fa87 	bl	8003360 <__lshift>
 8002e52:	4631      	mov	r1, r6
 8002e54:	4683      	mov	fp, r0
 8002e56:	f000 fad7 	bl	8003408 <__mcmp>
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	dc03      	bgt.n	8002e66 <_dtoa_r+0xa3e>
 8002e5e:	d1e0      	bne.n	8002e22 <_dtoa_r+0x9fa>
 8002e60:	f018 0f01 	tst.w	r8, #1
 8002e64:	d0dd      	beq.n	8002e22 <_dtoa_r+0x9fa>
 8002e66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002e6a:	d1d8      	bne.n	8002e1e <_dtoa_r+0x9f6>
 8002e6c:	9b07      	ldr	r3, [sp, #28]
 8002e6e:	9a07      	ldr	r2, [sp, #28]
 8002e70:	1c5d      	adds	r5, r3, #1
 8002e72:	2339      	movs	r3, #57	; 0x39
 8002e74:	7013      	strb	r3, [r2, #0]
 8002e76:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002e7a:	2b39      	cmp	r3, #57	; 0x39
 8002e7c:	f105 32ff 	add.w	r2, r5, #4294967295
 8002e80:	d04e      	beq.n	8002f20 <_dtoa_r+0xaf8>
 8002e82:	3301      	adds	r3, #1
 8002e84:	e053      	b.n	8002f2e <_dtoa_r+0xb06>
 8002e86:	9a07      	ldr	r2, [sp, #28]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f102 0501 	add.w	r5, r2, #1
 8002e8e:	dd06      	ble.n	8002e9e <_dtoa_r+0xa76>
 8002e90:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002e94:	d0ea      	beq.n	8002e6c <_dtoa_r+0xa44>
 8002e96:	f108 0801 	add.w	r8, r8, #1
 8002e9a:	9b07      	ldr	r3, [sp, #28]
 8002e9c:	e7c3      	b.n	8002e26 <_dtoa_r+0x9fe>
 8002e9e:	9b06      	ldr	r3, [sp, #24]
 8002ea0:	9a04      	ldr	r2, [sp, #16]
 8002ea2:	f805 8c01 	strb.w	r8, [r5, #-1]
 8002ea6:	1aeb      	subs	r3, r5, r3
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d021      	beq.n	8002ef0 <_dtoa_r+0xac8>
 8002eac:	4659      	mov	r1, fp
 8002eae:	2300      	movs	r3, #0
 8002eb0:	220a      	movs	r2, #10
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	f000 f8de 	bl	8003074 <__multadd>
 8002eb8:	45b9      	cmp	r9, r7
 8002eba:	4683      	mov	fp, r0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	f04f 020a 	mov.w	r2, #10
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	d105      	bne.n	8002ed6 <_dtoa_r+0xaae>
 8002eca:	f000 f8d3 	bl	8003074 <__multadd>
 8002ece:	4681      	mov	r9, r0
 8002ed0:	4607      	mov	r7, r0
 8002ed2:	9507      	str	r5, [sp, #28]
 8002ed4:	e777      	b.n	8002dc6 <_dtoa_r+0x99e>
 8002ed6:	f000 f8cd 	bl	8003074 <__multadd>
 8002eda:	4639      	mov	r1, r7
 8002edc:	4681      	mov	r9, r0
 8002ede:	2300      	movs	r3, #0
 8002ee0:	220a      	movs	r2, #10
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f000 f8c6 	bl	8003074 <__multadd>
 8002ee8:	4607      	mov	r7, r0
 8002eea:	e7f2      	b.n	8002ed2 <_dtoa_r+0xaaa>
 8002eec:	f04f 0900 	mov.w	r9, #0
 8002ef0:	4659      	mov	r1, fp
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f000 fa33 	bl	8003360 <__lshift>
 8002efa:	4631      	mov	r1, r6
 8002efc:	4683      	mov	fp, r0
 8002efe:	f000 fa83 	bl	8003408 <__mcmp>
 8002f02:	2800      	cmp	r0, #0
 8002f04:	dcb7      	bgt.n	8002e76 <_dtoa_r+0xa4e>
 8002f06:	d102      	bne.n	8002f0e <_dtoa_r+0xae6>
 8002f08:	f018 0f01 	tst.w	r8, #1
 8002f0c:	d1b3      	bne.n	8002e76 <_dtoa_r+0xa4e>
 8002f0e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002f12:	2b30      	cmp	r3, #48	; 0x30
 8002f14:	f105 32ff 	add.w	r2, r5, #4294967295
 8002f18:	f47f af0c 	bne.w	8002d34 <_dtoa_r+0x90c>
 8002f1c:	4615      	mov	r5, r2
 8002f1e:	e7f6      	b.n	8002f0e <_dtoa_r+0xae6>
 8002f20:	9b06      	ldr	r3, [sp, #24]
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d105      	bne.n	8002f32 <_dtoa_r+0xb0a>
 8002f26:	9a06      	ldr	r2, [sp, #24]
 8002f28:	f10a 0a01 	add.w	sl, sl, #1
 8002f2c:	2331      	movs	r3, #49	; 0x31
 8002f2e:	7013      	strb	r3, [r2, #0]
 8002f30:	e700      	b.n	8002d34 <_dtoa_r+0x90c>
 8002f32:	4615      	mov	r5, r2
 8002f34:	e79f      	b.n	8002e76 <_dtoa_r+0xa4e>
 8002f36:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <_dtoa_r+0xb6c>)
 8002f38:	f7ff badb 	b.w	80024f2 <_dtoa_r+0xca>
 8002f3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f47f aab5 	bne.w	80024ae <_dtoa_r+0x86>
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <_dtoa_r+0xb70>)
 8002f46:	f7ff bad4 	b.w	80024f2 <_dtoa_r+0xca>
 8002f4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	f77f ae3c 	ble.w	8002bca <_dtoa_r+0x7a2>
 8002f52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f54:	9308      	str	r3, [sp, #32]
 8002f56:	e650      	b.n	8002bfa <_dtoa_r+0x7d2>
 8002f58:	9b04      	ldr	r3, [sp, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	dc03      	bgt.n	8002f66 <_dtoa_r+0xb3e>
 8002f5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	f73f aed2 	bgt.w	8002d0a <_dtoa_r+0x8e2>
 8002f66:	9d06      	ldr	r5, [sp, #24]
 8002f68:	4631      	mov	r1, r6
 8002f6a:	4658      	mov	r0, fp
 8002f6c:	f7ff f9cf 	bl	800230e <quorem>
 8002f70:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8002f74:	f805 8b01 	strb.w	r8, [r5], #1
 8002f78:	9b06      	ldr	r3, [sp, #24]
 8002f7a:	9a04      	ldr	r2, [sp, #16]
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	ddb4      	ble.n	8002eec <_dtoa_r+0xac4>
 8002f82:	4659      	mov	r1, fp
 8002f84:	2300      	movs	r3, #0
 8002f86:	220a      	movs	r2, #10
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f000 f873 	bl	8003074 <__multadd>
 8002f8e:	4683      	mov	fp, r0
 8002f90:	e7ea      	b.n	8002f68 <_dtoa_r+0xb40>
 8002f92:	bf00      	nop
 8002f94:	08003760 	.word	0x08003760
 8002f98:	08003762 	.word	0x08003762

08002f9c <_localeconv_r>:
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <_localeconv_r+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6a18      	ldr	r0, [r3, #32]
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <_localeconv_r+0x18>)
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	bf08      	it	eq
 8002fa8:	4618      	moveq	r0, r3
 8002faa:	30f0      	adds	r0, #240	; 0xf0
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000020 	.word	0x20000020
 8002fb4:	20000084 	.word	0x20000084

08002fb8 <malloc>:
 8002fb8:	4b02      	ldr	r3, [pc, #8]	; (8002fc4 <malloc+0xc>)
 8002fba:	4601      	mov	r1, r0
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	f000 baf7 	b.w	80035b0 <_malloc_r>
 8002fc2:	bf00      	nop
 8002fc4:	20000020 	.word	0x20000020

08002fc8 <memcpy>:
 8002fc8:	b510      	push	{r4, lr}
 8002fca:	1e43      	subs	r3, r0, #1
 8002fcc:	440a      	add	r2, r1
 8002fce:	4291      	cmp	r1, r2
 8002fd0:	d100      	bne.n	8002fd4 <memcpy+0xc>
 8002fd2:	bd10      	pop	{r4, pc}
 8002fd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fdc:	e7f7      	b.n	8002fce <memcpy+0x6>

08002fde <_Balloc>:
 8002fde:	b570      	push	{r4, r5, r6, lr}
 8002fe0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	460e      	mov	r6, r1
 8002fe6:	b93d      	cbnz	r5, 8002ff8 <_Balloc+0x1a>
 8002fe8:	2010      	movs	r0, #16
 8002fea:	f7ff ffe5 	bl	8002fb8 <malloc>
 8002fee:	6260      	str	r0, [r4, #36]	; 0x24
 8002ff0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002ff4:	6005      	str	r5, [r0, #0]
 8002ff6:	60c5      	str	r5, [r0, #12]
 8002ff8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002ffa:	68eb      	ldr	r3, [r5, #12]
 8002ffc:	b183      	cbz	r3, 8003020 <_Balloc+0x42>
 8002ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003006:	b9b8      	cbnz	r0, 8003038 <_Balloc+0x5a>
 8003008:	2101      	movs	r1, #1
 800300a:	fa01 f506 	lsl.w	r5, r1, r6
 800300e:	1d6a      	adds	r2, r5, #5
 8003010:	0092      	lsls	r2, r2, #2
 8003012:	4620      	mov	r0, r4
 8003014:	f000 fabe 	bl	8003594 <_calloc_r>
 8003018:	b160      	cbz	r0, 8003034 <_Balloc+0x56>
 800301a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800301e:	e00e      	b.n	800303e <_Balloc+0x60>
 8003020:	2221      	movs	r2, #33	; 0x21
 8003022:	2104      	movs	r1, #4
 8003024:	4620      	mov	r0, r4
 8003026:	f000 fab5 	bl	8003594 <_calloc_r>
 800302a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800302c:	60e8      	str	r0, [r5, #12]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1e4      	bne.n	8002ffe <_Balloc+0x20>
 8003034:	2000      	movs	r0, #0
 8003036:	bd70      	pop	{r4, r5, r6, pc}
 8003038:	6802      	ldr	r2, [r0, #0]
 800303a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800303e:	2300      	movs	r3, #0
 8003040:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003044:	e7f7      	b.n	8003036 <_Balloc+0x58>

08003046 <_Bfree>:
 8003046:	b570      	push	{r4, r5, r6, lr}
 8003048:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800304a:	4606      	mov	r6, r0
 800304c:	460d      	mov	r5, r1
 800304e:	b93c      	cbnz	r4, 8003060 <_Bfree+0x1a>
 8003050:	2010      	movs	r0, #16
 8003052:	f7ff ffb1 	bl	8002fb8 <malloc>
 8003056:	6270      	str	r0, [r6, #36]	; 0x24
 8003058:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800305c:	6004      	str	r4, [r0, #0]
 800305e:	60c4      	str	r4, [r0, #12]
 8003060:	b13d      	cbz	r5, 8003072 <_Bfree+0x2c>
 8003062:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003064:	686a      	ldr	r2, [r5, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800306c:	6029      	str	r1, [r5, #0]
 800306e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003072:	bd70      	pop	{r4, r5, r6, pc}

08003074 <__multadd>:
 8003074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003078:	690d      	ldr	r5, [r1, #16]
 800307a:	461f      	mov	r7, r3
 800307c:	4606      	mov	r6, r0
 800307e:	460c      	mov	r4, r1
 8003080:	f101 0c14 	add.w	ip, r1, #20
 8003084:	2300      	movs	r3, #0
 8003086:	f8dc 0000 	ldr.w	r0, [ip]
 800308a:	b281      	uxth	r1, r0
 800308c:	fb02 7101 	mla	r1, r2, r1, r7
 8003090:	0c0f      	lsrs	r7, r1, #16
 8003092:	0c00      	lsrs	r0, r0, #16
 8003094:	fb02 7000 	mla	r0, r2, r0, r7
 8003098:	b289      	uxth	r1, r1
 800309a:	3301      	adds	r3, #1
 800309c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80030a0:	429d      	cmp	r5, r3
 80030a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80030a6:	f84c 1b04 	str.w	r1, [ip], #4
 80030aa:	dcec      	bgt.n	8003086 <__multadd+0x12>
 80030ac:	b1d7      	cbz	r7, 80030e4 <__multadd+0x70>
 80030ae:	68a3      	ldr	r3, [r4, #8]
 80030b0:	42ab      	cmp	r3, r5
 80030b2:	dc12      	bgt.n	80030da <__multadd+0x66>
 80030b4:	6861      	ldr	r1, [r4, #4]
 80030b6:	4630      	mov	r0, r6
 80030b8:	3101      	adds	r1, #1
 80030ba:	f7ff ff90 	bl	8002fde <_Balloc>
 80030be:	6922      	ldr	r2, [r4, #16]
 80030c0:	3202      	adds	r2, #2
 80030c2:	f104 010c 	add.w	r1, r4, #12
 80030c6:	4680      	mov	r8, r0
 80030c8:	0092      	lsls	r2, r2, #2
 80030ca:	300c      	adds	r0, #12
 80030cc:	f7ff ff7c 	bl	8002fc8 <memcpy>
 80030d0:	4621      	mov	r1, r4
 80030d2:	4630      	mov	r0, r6
 80030d4:	f7ff ffb7 	bl	8003046 <_Bfree>
 80030d8:	4644      	mov	r4, r8
 80030da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80030de:	3501      	adds	r5, #1
 80030e0:	615f      	str	r7, [r3, #20]
 80030e2:	6125      	str	r5, [r4, #16]
 80030e4:	4620      	mov	r0, r4
 80030e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080030ea <__hi0bits>:
 80030ea:	0c02      	lsrs	r2, r0, #16
 80030ec:	0412      	lsls	r2, r2, #16
 80030ee:	4603      	mov	r3, r0
 80030f0:	b9b2      	cbnz	r2, 8003120 <__hi0bits+0x36>
 80030f2:	0403      	lsls	r3, r0, #16
 80030f4:	2010      	movs	r0, #16
 80030f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80030fa:	bf04      	itt	eq
 80030fc:	021b      	lsleq	r3, r3, #8
 80030fe:	3008      	addeq	r0, #8
 8003100:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003104:	bf04      	itt	eq
 8003106:	011b      	lsleq	r3, r3, #4
 8003108:	3004      	addeq	r0, #4
 800310a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800310e:	bf04      	itt	eq
 8003110:	009b      	lsleq	r3, r3, #2
 8003112:	3002      	addeq	r0, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	db06      	blt.n	8003126 <__hi0bits+0x3c>
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	d503      	bpl.n	8003124 <__hi0bits+0x3a>
 800311c:	3001      	adds	r0, #1
 800311e:	4770      	bx	lr
 8003120:	2000      	movs	r0, #0
 8003122:	e7e8      	b.n	80030f6 <__hi0bits+0xc>
 8003124:	2020      	movs	r0, #32
 8003126:	4770      	bx	lr

08003128 <__lo0bits>:
 8003128:	6803      	ldr	r3, [r0, #0]
 800312a:	f013 0207 	ands.w	r2, r3, #7
 800312e:	4601      	mov	r1, r0
 8003130:	d00b      	beq.n	800314a <__lo0bits+0x22>
 8003132:	07da      	lsls	r2, r3, #31
 8003134:	d423      	bmi.n	800317e <__lo0bits+0x56>
 8003136:	0798      	lsls	r0, r3, #30
 8003138:	bf49      	itett	mi
 800313a:	085b      	lsrmi	r3, r3, #1
 800313c:	089b      	lsrpl	r3, r3, #2
 800313e:	2001      	movmi	r0, #1
 8003140:	600b      	strmi	r3, [r1, #0]
 8003142:	bf5c      	itt	pl
 8003144:	600b      	strpl	r3, [r1, #0]
 8003146:	2002      	movpl	r0, #2
 8003148:	4770      	bx	lr
 800314a:	b298      	uxth	r0, r3
 800314c:	b9a8      	cbnz	r0, 800317a <__lo0bits+0x52>
 800314e:	0c1b      	lsrs	r3, r3, #16
 8003150:	2010      	movs	r0, #16
 8003152:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003156:	bf04      	itt	eq
 8003158:	0a1b      	lsreq	r3, r3, #8
 800315a:	3008      	addeq	r0, #8
 800315c:	071a      	lsls	r2, r3, #28
 800315e:	bf04      	itt	eq
 8003160:	091b      	lsreq	r3, r3, #4
 8003162:	3004      	addeq	r0, #4
 8003164:	079a      	lsls	r2, r3, #30
 8003166:	bf04      	itt	eq
 8003168:	089b      	lsreq	r3, r3, #2
 800316a:	3002      	addeq	r0, #2
 800316c:	07da      	lsls	r2, r3, #31
 800316e:	d402      	bmi.n	8003176 <__lo0bits+0x4e>
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	d006      	beq.n	8003182 <__lo0bits+0x5a>
 8003174:	3001      	adds	r0, #1
 8003176:	600b      	str	r3, [r1, #0]
 8003178:	4770      	bx	lr
 800317a:	4610      	mov	r0, r2
 800317c:	e7e9      	b.n	8003152 <__lo0bits+0x2a>
 800317e:	2000      	movs	r0, #0
 8003180:	4770      	bx	lr
 8003182:	2020      	movs	r0, #32
 8003184:	4770      	bx	lr

08003186 <__i2b>:
 8003186:	b510      	push	{r4, lr}
 8003188:	460c      	mov	r4, r1
 800318a:	2101      	movs	r1, #1
 800318c:	f7ff ff27 	bl	8002fde <_Balloc>
 8003190:	2201      	movs	r2, #1
 8003192:	6144      	str	r4, [r0, #20]
 8003194:	6102      	str	r2, [r0, #16]
 8003196:	bd10      	pop	{r4, pc}

08003198 <__multiply>:
 8003198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800319c:	4614      	mov	r4, r2
 800319e:	690a      	ldr	r2, [r1, #16]
 80031a0:	6923      	ldr	r3, [r4, #16]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	bfb8      	it	lt
 80031a6:	460b      	movlt	r3, r1
 80031a8:	4688      	mov	r8, r1
 80031aa:	bfbc      	itt	lt
 80031ac:	46a0      	movlt	r8, r4
 80031ae:	461c      	movlt	r4, r3
 80031b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80031b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80031b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80031bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80031c0:	eb07 0609 	add.w	r6, r7, r9
 80031c4:	42b3      	cmp	r3, r6
 80031c6:	bfb8      	it	lt
 80031c8:	3101      	addlt	r1, #1
 80031ca:	f7ff ff08 	bl	8002fde <_Balloc>
 80031ce:	f100 0514 	add.w	r5, r0, #20
 80031d2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80031d6:	462b      	mov	r3, r5
 80031d8:	2200      	movs	r2, #0
 80031da:	4573      	cmp	r3, lr
 80031dc:	d316      	bcc.n	800320c <__multiply+0x74>
 80031de:	f104 0214 	add.w	r2, r4, #20
 80031e2:	f108 0114 	add.w	r1, r8, #20
 80031e6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80031ea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	9b00      	ldr	r3, [sp, #0]
 80031f2:	9201      	str	r2, [sp, #4]
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d80c      	bhi.n	8003212 <__multiply+0x7a>
 80031f8:	2e00      	cmp	r6, #0
 80031fa:	dd03      	ble.n	8003204 <__multiply+0x6c>
 80031fc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003200:	2b00      	cmp	r3, #0
 8003202:	d05d      	beq.n	80032c0 <__multiply+0x128>
 8003204:	6106      	str	r6, [r0, #16]
 8003206:	b003      	add	sp, #12
 8003208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800320c:	f843 2b04 	str.w	r2, [r3], #4
 8003210:	e7e3      	b.n	80031da <__multiply+0x42>
 8003212:	f8b2 b000 	ldrh.w	fp, [r2]
 8003216:	f1bb 0f00 	cmp.w	fp, #0
 800321a:	d023      	beq.n	8003264 <__multiply+0xcc>
 800321c:	4689      	mov	r9, r1
 800321e:	46ac      	mov	ip, r5
 8003220:	f04f 0800 	mov.w	r8, #0
 8003224:	f859 4b04 	ldr.w	r4, [r9], #4
 8003228:	f8dc a000 	ldr.w	sl, [ip]
 800322c:	b2a3      	uxth	r3, r4
 800322e:	fa1f fa8a 	uxth.w	sl, sl
 8003232:	fb0b a303 	mla	r3, fp, r3, sl
 8003236:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800323a:	f8dc 4000 	ldr.w	r4, [ip]
 800323e:	4443      	add	r3, r8
 8003240:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003244:	fb0b 840a 	mla	r4, fp, sl, r8
 8003248:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800324c:	46e2      	mov	sl, ip
 800324e:	b29b      	uxth	r3, r3
 8003250:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003254:	454f      	cmp	r7, r9
 8003256:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800325a:	f84a 3b04 	str.w	r3, [sl], #4
 800325e:	d82b      	bhi.n	80032b8 <__multiply+0x120>
 8003260:	f8cc 8004 	str.w	r8, [ip, #4]
 8003264:	9b01      	ldr	r3, [sp, #4]
 8003266:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800326a:	3204      	adds	r2, #4
 800326c:	f1ba 0f00 	cmp.w	sl, #0
 8003270:	d020      	beq.n	80032b4 <__multiply+0x11c>
 8003272:	682b      	ldr	r3, [r5, #0]
 8003274:	4689      	mov	r9, r1
 8003276:	46a8      	mov	r8, r5
 8003278:	f04f 0b00 	mov.w	fp, #0
 800327c:	f8b9 c000 	ldrh.w	ip, [r9]
 8003280:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8003284:	fb0a 440c 	mla	r4, sl, ip, r4
 8003288:	445c      	add	r4, fp
 800328a:	46c4      	mov	ip, r8
 800328c:	b29b      	uxth	r3, r3
 800328e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003292:	f84c 3b04 	str.w	r3, [ip], #4
 8003296:	f859 3b04 	ldr.w	r3, [r9], #4
 800329a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800329e:	0c1b      	lsrs	r3, r3, #16
 80032a0:	fb0a b303 	mla	r3, sl, r3, fp
 80032a4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80032a8:	454f      	cmp	r7, r9
 80032aa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80032ae:	d805      	bhi.n	80032bc <__multiply+0x124>
 80032b0:	f8c8 3004 	str.w	r3, [r8, #4]
 80032b4:	3504      	adds	r5, #4
 80032b6:	e79b      	b.n	80031f0 <__multiply+0x58>
 80032b8:	46d4      	mov	ip, sl
 80032ba:	e7b3      	b.n	8003224 <__multiply+0x8c>
 80032bc:	46e0      	mov	r8, ip
 80032be:	e7dd      	b.n	800327c <__multiply+0xe4>
 80032c0:	3e01      	subs	r6, #1
 80032c2:	e799      	b.n	80031f8 <__multiply+0x60>

080032c4 <__pow5mult>:
 80032c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032c8:	4615      	mov	r5, r2
 80032ca:	f012 0203 	ands.w	r2, r2, #3
 80032ce:	4606      	mov	r6, r0
 80032d0:	460f      	mov	r7, r1
 80032d2:	d007      	beq.n	80032e4 <__pow5mult+0x20>
 80032d4:	3a01      	subs	r2, #1
 80032d6:	4c21      	ldr	r4, [pc, #132]	; (800335c <__pow5mult+0x98>)
 80032d8:	2300      	movs	r3, #0
 80032da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80032de:	f7ff fec9 	bl	8003074 <__multadd>
 80032e2:	4607      	mov	r7, r0
 80032e4:	10ad      	asrs	r5, r5, #2
 80032e6:	d035      	beq.n	8003354 <__pow5mult+0x90>
 80032e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80032ea:	b93c      	cbnz	r4, 80032fc <__pow5mult+0x38>
 80032ec:	2010      	movs	r0, #16
 80032ee:	f7ff fe63 	bl	8002fb8 <malloc>
 80032f2:	6270      	str	r0, [r6, #36]	; 0x24
 80032f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80032f8:	6004      	str	r4, [r0, #0]
 80032fa:	60c4      	str	r4, [r0, #12]
 80032fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003300:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003304:	b94c      	cbnz	r4, 800331a <__pow5mult+0x56>
 8003306:	f240 2171 	movw	r1, #625	; 0x271
 800330a:	4630      	mov	r0, r6
 800330c:	f7ff ff3b 	bl	8003186 <__i2b>
 8003310:	2300      	movs	r3, #0
 8003312:	f8c8 0008 	str.w	r0, [r8, #8]
 8003316:	4604      	mov	r4, r0
 8003318:	6003      	str	r3, [r0, #0]
 800331a:	f04f 0800 	mov.w	r8, #0
 800331e:	07eb      	lsls	r3, r5, #31
 8003320:	d50a      	bpl.n	8003338 <__pow5mult+0x74>
 8003322:	4639      	mov	r1, r7
 8003324:	4622      	mov	r2, r4
 8003326:	4630      	mov	r0, r6
 8003328:	f7ff ff36 	bl	8003198 <__multiply>
 800332c:	4639      	mov	r1, r7
 800332e:	4681      	mov	r9, r0
 8003330:	4630      	mov	r0, r6
 8003332:	f7ff fe88 	bl	8003046 <_Bfree>
 8003336:	464f      	mov	r7, r9
 8003338:	106d      	asrs	r5, r5, #1
 800333a:	d00b      	beq.n	8003354 <__pow5mult+0x90>
 800333c:	6820      	ldr	r0, [r4, #0]
 800333e:	b938      	cbnz	r0, 8003350 <__pow5mult+0x8c>
 8003340:	4622      	mov	r2, r4
 8003342:	4621      	mov	r1, r4
 8003344:	4630      	mov	r0, r6
 8003346:	f7ff ff27 	bl	8003198 <__multiply>
 800334a:	6020      	str	r0, [r4, #0]
 800334c:	f8c0 8000 	str.w	r8, [r0]
 8003350:	4604      	mov	r4, r0
 8003352:	e7e4      	b.n	800331e <__pow5mult+0x5a>
 8003354:	4638      	mov	r0, r7
 8003356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800335a:	bf00      	nop
 800335c:	08003860 	.word	0x08003860

08003360 <__lshift>:
 8003360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003364:	460c      	mov	r4, r1
 8003366:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800336a:	6923      	ldr	r3, [r4, #16]
 800336c:	6849      	ldr	r1, [r1, #4]
 800336e:	eb0a 0903 	add.w	r9, sl, r3
 8003372:	68a3      	ldr	r3, [r4, #8]
 8003374:	4607      	mov	r7, r0
 8003376:	4616      	mov	r6, r2
 8003378:	f109 0501 	add.w	r5, r9, #1
 800337c:	42ab      	cmp	r3, r5
 800337e:	db32      	blt.n	80033e6 <__lshift+0x86>
 8003380:	4638      	mov	r0, r7
 8003382:	f7ff fe2c 	bl	8002fde <_Balloc>
 8003386:	2300      	movs	r3, #0
 8003388:	4680      	mov	r8, r0
 800338a:	f100 0114 	add.w	r1, r0, #20
 800338e:	461a      	mov	r2, r3
 8003390:	4553      	cmp	r3, sl
 8003392:	db2b      	blt.n	80033ec <__lshift+0x8c>
 8003394:	6920      	ldr	r0, [r4, #16]
 8003396:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800339a:	f104 0314 	add.w	r3, r4, #20
 800339e:	f016 021f 	ands.w	r2, r6, #31
 80033a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80033a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80033aa:	d025      	beq.n	80033f8 <__lshift+0x98>
 80033ac:	f1c2 0e20 	rsb	lr, r2, #32
 80033b0:	2000      	movs	r0, #0
 80033b2:	681e      	ldr	r6, [r3, #0]
 80033b4:	468a      	mov	sl, r1
 80033b6:	4096      	lsls	r6, r2
 80033b8:	4330      	orrs	r0, r6
 80033ba:	f84a 0b04 	str.w	r0, [sl], #4
 80033be:	f853 0b04 	ldr.w	r0, [r3], #4
 80033c2:	459c      	cmp	ip, r3
 80033c4:	fa20 f00e 	lsr.w	r0, r0, lr
 80033c8:	d814      	bhi.n	80033f4 <__lshift+0x94>
 80033ca:	6048      	str	r0, [r1, #4]
 80033cc:	b108      	cbz	r0, 80033d2 <__lshift+0x72>
 80033ce:	f109 0502 	add.w	r5, r9, #2
 80033d2:	3d01      	subs	r5, #1
 80033d4:	4638      	mov	r0, r7
 80033d6:	f8c8 5010 	str.w	r5, [r8, #16]
 80033da:	4621      	mov	r1, r4
 80033dc:	f7ff fe33 	bl	8003046 <_Bfree>
 80033e0:	4640      	mov	r0, r8
 80033e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e6:	3101      	adds	r1, #1
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	e7c7      	b.n	800337c <__lshift+0x1c>
 80033ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80033f0:	3301      	adds	r3, #1
 80033f2:	e7cd      	b.n	8003390 <__lshift+0x30>
 80033f4:	4651      	mov	r1, sl
 80033f6:	e7dc      	b.n	80033b2 <__lshift+0x52>
 80033f8:	3904      	subs	r1, #4
 80033fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80033fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8003402:	459c      	cmp	ip, r3
 8003404:	d8f9      	bhi.n	80033fa <__lshift+0x9a>
 8003406:	e7e4      	b.n	80033d2 <__lshift+0x72>

08003408 <__mcmp>:
 8003408:	6903      	ldr	r3, [r0, #16]
 800340a:	690a      	ldr	r2, [r1, #16]
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	b530      	push	{r4, r5, lr}
 8003410:	d10c      	bne.n	800342c <__mcmp+0x24>
 8003412:	0092      	lsls	r2, r2, #2
 8003414:	3014      	adds	r0, #20
 8003416:	3114      	adds	r1, #20
 8003418:	1884      	adds	r4, r0, r2
 800341a:	4411      	add	r1, r2
 800341c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003420:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003424:	4295      	cmp	r5, r2
 8003426:	d003      	beq.n	8003430 <__mcmp+0x28>
 8003428:	d305      	bcc.n	8003436 <__mcmp+0x2e>
 800342a:	2301      	movs	r3, #1
 800342c:	4618      	mov	r0, r3
 800342e:	bd30      	pop	{r4, r5, pc}
 8003430:	42a0      	cmp	r0, r4
 8003432:	d3f3      	bcc.n	800341c <__mcmp+0x14>
 8003434:	e7fa      	b.n	800342c <__mcmp+0x24>
 8003436:	f04f 33ff 	mov.w	r3, #4294967295
 800343a:	e7f7      	b.n	800342c <__mcmp+0x24>

0800343c <__mdiff>:
 800343c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003440:	460d      	mov	r5, r1
 8003442:	4607      	mov	r7, r0
 8003444:	4611      	mov	r1, r2
 8003446:	4628      	mov	r0, r5
 8003448:	4614      	mov	r4, r2
 800344a:	f7ff ffdd 	bl	8003408 <__mcmp>
 800344e:	1e06      	subs	r6, r0, #0
 8003450:	d108      	bne.n	8003464 <__mdiff+0x28>
 8003452:	4631      	mov	r1, r6
 8003454:	4638      	mov	r0, r7
 8003456:	f7ff fdc2 	bl	8002fde <_Balloc>
 800345a:	2301      	movs	r3, #1
 800345c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003464:	bfa4      	itt	ge
 8003466:	4623      	movge	r3, r4
 8003468:	462c      	movge	r4, r5
 800346a:	4638      	mov	r0, r7
 800346c:	6861      	ldr	r1, [r4, #4]
 800346e:	bfa6      	itte	ge
 8003470:	461d      	movge	r5, r3
 8003472:	2600      	movge	r6, #0
 8003474:	2601      	movlt	r6, #1
 8003476:	f7ff fdb2 	bl	8002fde <_Balloc>
 800347a:	692b      	ldr	r3, [r5, #16]
 800347c:	60c6      	str	r6, [r0, #12]
 800347e:	6926      	ldr	r6, [r4, #16]
 8003480:	f105 0914 	add.w	r9, r5, #20
 8003484:	f104 0214 	add.w	r2, r4, #20
 8003488:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800348c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003490:	f100 0514 	add.w	r5, r0, #20
 8003494:	f04f 0e00 	mov.w	lr, #0
 8003498:	f852 ab04 	ldr.w	sl, [r2], #4
 800349c:	f859 4b04 	ldr.w	r4, [r9], #4
 80034a0:	fa1e f18a 	uxtah	r1, lr, sl
 80034a4:	b2a3      	uxth	r3, r4
 80034a6:	1ac9      	subs	r1, r1, r3
 80034a8:	0c23      	lsrs	r3, r4, #16
 80034aa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80034ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80034b2:	b289      	uxth	r1, r1
 80034b4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80034b8:	45c8      	cmp	r8, r9
 80034ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80034be:	4694      	mov	ip, r2
 80034c0:	f845 3b04 	str.w	r3, [r5], #4
 80034c4:	d8e8      	bhi.n	8003498 <__mdiff+0x5c>
 80034c6:	45bc      	cmp	ip, r7
 80034c8:	d304      	bcc.n	80034d4 <__mdiff+0x98>
 80034ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80034ce:	b183      	cbz	r3, 80034f2 <__mdiff+0xb6>
 80034d0:	6106      	str	r6, [r0, #16]
 80034d2:	e7c5      	b.n	8003460 <__mdiff+0x24>
 80034d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80034d8:	fa1e f381 	uxtah	r3, lr, r1
 80034dc:	141a      	asrs	r2, r3, #16
 80034de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80034e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80034ec:	f845 3b04 	str.w	r3, [r5], #4
 80034f0:	e7e9      	b.n	80034c6 <__mdiff+0x8a>
 80034f2:	3e01      	subs	r6, #1
 80034f4:	e7e9      	b.n	80034ca <__mdiff+0x8e>

080034f6 <__d2b>:
 80034f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80034fa:	2101      	movs	r1, #1
 80034fc:	461c      	mov	r4, r3
 80034fe:	4690      	mov	r8, r2
 8003500:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8003504:	f7ff fd6b 	bl	8002fde <_Balloc>
 8003508:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800350c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8003510:	4607      	mov	r7, r0
 8003512:	bb34      	cbnz	r4, 8003562 <__d2b+0x6c>
 8003514:	9201      	str	r2, [sp, #4]
 8003516:	f1b8 0200 	subs.w	r2, r8, #0
 800351a:	d027      	beq.n	800356c <__d2b+0x76>
 800351c:	a802      	add	r0, sp, #8
 800351e:	f840 2d08 	str.w	r2, [r0, #-8]!
 8003522:	f7ff fe01 	bl	8003128 <__lo0bits>
 8003526:	9900      	ldr	r1, [sp, #0]
 8003528:	b1f0      	cbz	r0, 8003568 <__d2b+0x72>
 800352a:	9a01      	ldr	r2, [sp, #4]
 800352c:	f1c0 0320 	rsb	r3, r0, #32
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	430b      	orrs	r3, r1
 8003536:	40c2      	lsrs	r2, r0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	9201      	str	r2, [sp, #4]
 800353c:	9b01      	ldr	r3, [sp, #4]
 800353e:	61bb      	str	r3, [r7, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf14      	ite	ne
 8003544:	2102      	movne	r1, #2
 8003546:	2101      	moveq	r1, #1
 8003548:	6139      	str	r1, [r7, #16]
 800354a:	b1c4      	cbz	r4, 800357e <__d2b+0x88>
 800354c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003550:	4404      	add	r4, r0
 8003552:	6034      	str	r4, [r6, #0]
 8003554:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003558:	6028      	str	r0, [r5, #0]
 800355a:	4638      	mov	r0, r7
 800355c:	b002      	add	sp, #8
 800355e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003562:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003566:	e7d5      	b.n	8003514 <__d2b+0x1e>
 8003568:	6179      	str	r1, [r7, #20]
 800356a:	e7e7      	b.n	800353c <__d2b+0x46>
 800356c:	a801      	add	r0, sp, #4
 800356e:	f7ff fddb 	bl	8003128 <__lo0bits>
 8003572:	9b01      	ldr	r3, [sp, #4]
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	2101      	movs	r1, #1
 8003578:	6139      	str	r1, [r7, #16]
 800357a:	3020      	adds	r0, #32
 800357c:	e7e5      	b.n	800354a <__d2b+0x54>
 800357e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003582:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003586:	6030      	str	r0, [r6, #0]
 8003588:	6918      	ldr	r0, [r3, #16]
 800358a:	f7ff fdae 	bl	80030ea <__hi0bits>
 800358e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003592:	e7e1      	b.n	8003558 <__d2b+0x62>

08003594 <_calloc_r>:
 8003594:	b538      	push	{r3, r4, r5, lr}
 8003596:	fb02 f401 	mul.w	r4, r2, r1
 800359a:	4621      	mov	r1, r4
 800359c:	f000 f808 	bl	80035b0 <_malloc_r>
 80035a0:	4605      	mov	r5, r0
 80035a2:	b118      	cbz	r0, 80035ac <_calloc_r+0x18>
 80035a4:	4622      	mov	r2, r4
 80035a6:	2100      	movs	r1, #0
 80035a8:	f7fe fb6e 	bl	8001c88 <memset>
 80035ac:	4628      	mov	r0, r5
 80035ae:	bd38      	pop	{r3, r4, r5, pc}

080035b0 <_malloc_r>:
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	1ccd      	adds	r5, r1, #3
 80035b4:	f025 0503 	bic.w	r5, r5, #3
 80035b8:	3508      	adds	r5, #8
 80035ba:	2d0c      	cmp	r5, #12
 80035bc:	bf38      	it	cc
 80035be:	250c      	movcc	r5, #12
 80035c0:	2d00      	cmp	r5, #0
 80035c2:	4606      	mov	r6, r0
 80035c4:	db01      	blt.n	80035ca <_malloc_r+0x1a>
 80035c6:	42a9      	cmp	r1, r5
 80035c8:	d903      	bls.n	80035d2 <_malloc_r+0x22>
 80035ca:	230c      	movs	r3, #12
 80035cc:	6033      	str	r3, [r6, #0]
 80035ce:	2000      	movs	r0, #0
 80035d0:	bd70      	pop	{r4, r5, r6, pc}
 80035d2:	f000 f869 	bl	80036a8 <__malloc_lock>
 80035d6:	4a21      	ldr	r2, [pc, #132]	; (800365c <_malloc_r+0xac>)
 80035d8:	6814      	ldr	r4, [r2, #0]
 80035da:	4621      	mov	r1, r4
 80035dc:	b991      	cbnz	r1, 8003604 <_malloc_r+0x54>
 80035de:	4c20      	ldr	r4, [pc, #128]	; (8003660 <_malloc_r+0xb0>)
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	b91b      	cbnz	r3, 80035ec <_malloc_r+0x3c>
 80035e4:	4630      	mov	r0, r6
 80035e6:	f000 f83d 	bl	8003664 <_sbrk_r>
 80035ea:	6020      	str	r0, [r4, #0]
 80035ec:	4629      	mov	r1, r5
 80035ee:	4630      	mov	r0, r6
 80035f0:	f000 f838 	bl	8003664 <_sbrk_r>
 80035f4:	1c43      	adds	r3, r0, #1
 80035f6:	d124      	bne.n	8003642 <_malloc_r+0x92>
 80035f8:	230c      	movs	r3, #12
 80035fa:	6033      	str	r3, [r6, #0]
 80035fc:	4630      	mov	r0, r6
 80035fe:	f000 f854 	bl	80036aa <__malloc_unlock>
 8003602:	e7e4      	b.n	80035ce <_malloc_r+0x1e>
 8003604:	680b      	ldr	r3, [r1, #0]
 8003606:	1b5b      	subs	r3, r3, r5
 8003608:	d418      	bmi.n	800363c <_malloc_r+0x8c>
 800360a:	2b0b      	cmp	r3, #11
 800360c:	d90f      	bls.n	800362e <_malloc_r+0x7e>
 800360e:	600b      	str	r3, [r1, #0]
 8003610:	50cd      	str	r5, [r1, r3]
 8003612:	18cc      	adds	r4, r1, r3
 8003614:	4630      	mov	r0, r6
 8003616:	f000 f848 	bl	80036aa <__malloc_unlock>
 800361a:	f104 000b 	add.w	r0, r4, #11
 800361e:	1d23      	adds	r3, r4, #4
 8003620:	f020 0007 	bic.w	r0, r0, #7
 8003624:	1ac3      	subs	r3, r0, r3
 8003626:	d0d3      	beq.n	80035d0 <_malloc_r+0x20>
 8003628:	425a      	negs	r2, r3
 800362a:	50e2      	str	r2, [r4, r3]
 800362c:	e7d0      	b.n	80035d0 <_malloc_r+0x20>
 800362e:	428c      	cmp	r4, r1
 8003630:	684b      	ldr	r3, [r1, #4]
 8003632:	bf16      	itet	ne
 8003634:	6063      	strne	r3, [r4, #4]
 8003636:	6013      	streq	r3, [r2, #0]
 8003638:	460c      	movne	r4, r1
 800363a:	e7eb      	b.n	8003614 <_malloc_r+0x64>
 800363c:	460c      	mov	r4, r1
 800363e:	6849      	ldr	r1, [r1, #4]
 8003640:	e7cc      	b.n	80035dc <_malloc_r+0x2c>
 8003642:	1cc4      	adds	r4, r0, #3
 8003644:	f024 0403 	bic.w	r4, r4, #3
 8003648:	42a0      	cmp	r0, r4
 800364a:	d005      	beq.n	8003658 <_malloc_r+0xa8>
 800364c:	1a21      	subs	r1, r4, r0
 800364e:	4630      	mov	r0, r6
 8003650:	f000 f808 	bl	8003664 <_sbrk_r>
 8003654:	3001      	adds	r0, #1
 8003656:	d0cf      	beq.n	80035f8 <_malloc_r+0x48>
 8003658:	6025      	str	r5, [r4, #0]
 800365a:	e7db      	b.n	8003614 <_malloc_r+0x64>
 800365c:	20000214 	.word	0x20000214
 8003660:	20000218 	.word	0x20000218

08003664 <_sbrk_r>:
 8003664:	b538      	push	{r3, r4, r5, lr}
 8003666:	4c06      	ldr	r4, [pc, #24]	; (8003680 <_sbrk_r+0x1c>)
 8003668:	2300      	movs	r3, #0
 800366a:	4605      	mov	r5, r0
 800366c:	4608      	mov	r0, r1
 800366e:	6023      	str	r3, [r4, #0]
 8003670:	f000 f82a 	bl	80036c8 <_sbrk>
 8003674:	1c43      	adds	r3, r0, #1
 8003676:	d102      	bne.n	800367e <_sbrk_r+0x1a>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	b103      	cbz	r3, 800367e <_sbrk_r+0x1a>
 800367c:	602b      	str	r3, [r5, #0]
 800367e:	bd38      	pop	{r3, r4, r5, pc}
 8003680:	20000240 	.word	0x20000240

08003684 <__ascii_mbtowc>:
 8003684:	b082      	sub	sp, #8
 8003686:	b901      	cbnz	r1, 800368a <__ascii_mbtowc+0x6>
 8003688:	a901      	add	r1, sp, #4
 800368a:	b142      	cbz	r2, 800369e <__ascii_mbtowc+0x1a>
 800368c:	b14b      	cbz	r3, 80036a2 <__ascii_mbtowc+0x1e>
 800368e:	7813      	ldrb	r3, [r2, #0]
 8003690:	600b      	str	r3, [r1, #0]
 8003692:	7812      	ldrb	r2, [r2, #0]
 8003694:	1c10      	adds	r0, r2, #0
 8003696:	bf18      	it	ne
 8003698:	2001      	movne	r0, #1
 800369a:	b002      	add	sp, #8
 800369c:	4770      	bx	lr
 800369e:	4610      	mov	r0, r2
 80036a0:	e7fb      	b.n	800369a <__ascii_mbtowc+0x16>
 80036a2:	f06f 0001 	mvn.w	r0, #1
 80036a6:	e7f8      	b.n	800369a <__ascii_mbtowc+0x16>

080036a8 <__malloc_lock>:
 80036a8:	4770      	bx	lr

080036aa <__malloc_unlock>:
 80036aa:	4770      	bx	lr

080036ac <__ascii_wctomb>:
 80036ac:	b149      	cbz	r1, 80036c2 <__ascii_wctomb+0x16>
 80036ae:	2aff      	cmp	r2, #255	; 0xff
 80036b0:	bf85      	ittet	hi
 80036b2:	238a      	movhi	r3, #138	; 0x8a
 80036b4:	6003      	strhi	r3, [r0, #0]
 80036b6:	700a      	strbls	r2, [r1, #0]
 80036b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80036bc:	bf98      	it	ls
 80036be:	2001      	movls	r0, #1
 80036c0:	4770      	bx	lr
 80036c2:	4608      	mov	r0, r1
 80036c4:	4770      	bx	lr
	...

080036c8 <_sbrk>:
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <_sbrk+0x38>)
 80036ca:	6819      	ldr	r1, [r3, #0]
 80036cc:	b510      	push	{r4, lr}
 80036ce:	4602      	mov	r2, r0
 80036d0:	b909      	cbnz	r1, 80036d6 <_sbrk+0xe>
 80036d2:	490c      	ldr	r1, [pc, #48]	; (8003704 <_sbrk+0x3c>)
 80036d4:	6019      	str	r1, [r3, #0]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	4669      	mov	r1, sp
 80036da:	4402      	add	r2, r0
 80036dc:	428a      	cmp	r2, r1
 80036de:	d806      	bhi.n	80036ee <_sbrk+0x26>
 80036e0:	4909      	ldr	r1, [pc, #36]	; (8003708 <_sbrk+0x40>)
 80036e2:	4c0a      	ldr	r4, [pc, #40]	; (800370c <_sbrk+0x44>)
 80036e4:	6809      	ldr	r1, [r1, #0]
 80036e6:	42a1      	cmp	r1, r4
 80036e8:	d008      	beq.n	80036fc <_sbrk+0x34>
 80036ea:	428a      	cmp	r2, r1
 80036ec:	d906      	bls.n	80036fc <_sbrk+0x34>
 80036ee:	f000 f80f 	bl	8003710 <__errno>
 80036f2:	230c      	movs	r3, #12
 80036f4:	6003      	str	r3, [r0, #0]
 80036f6:	f04f 30ff 	mov.w	r0, #4294967295
 80036fa:	bd10      	pop	{r4, pc}
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	e7fc      	b.n	80036fa <_sbrk+0x32>
 8003700:	2000021c 	.word	0x2000021c
 8003704:	20000248 	.word	0x20000248
 8003708:	200001f0 	.word	0x200001f0
 800370c:	cafedead 	.word	0xcafedead

08003710 <__errno>:
 8003710:	4b01      	ldr	r3, [pc, #4]	; (8003718 <__errno+0x8>)
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000020 	.word	0x20000020

0800371c <_init>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	bf00      	nop
 8003720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003722:	bc08      	pop	{r3}
 8003724:	469e      	mov	lr, r3
 8003726:	4770      	bx	lr

08003728 <_fini>:
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	bf00      	nop
 800372c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372e:	bc08      	pop	{r3}
 8003730:	469e      	mov	lr, r3
 8003732:	4770      	bx	lr
